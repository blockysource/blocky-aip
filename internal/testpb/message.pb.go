// Copyright 2023 The Blocky Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: internal/testpb/message.proto

package testpb

import (
	_ "github.com/blockysource/go-genproto/blocky/api/annotations"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Enum int32

const (
	Enum_UNKNOWN Enum = 0
	Enum_ONE     Enum = 1
	Enum_TWO     Enum = 2
	Enum_THREE   Enum = 3
)

// Enum value maps for Enum.
var (
	Enum_name = map[int32]string{
		0: "UNKNOWN",
		1: "ONE",
		2: "TWO",
		3: "THREE",
	}
	Enum_value = map[string]int32{
		"UNKNOWN": 0,
		"ONE":     1,
		"TWO":     2,
		"THREE":   3,
	}
)

func (x Enum) Enum() *Enum {
	p := new(Enum)
	*p = x
	return p
}

func (x Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_internal_testpb_message_proto_enumTypes[0].Descriptor()
}

func (Enum) Type() protoreflect.EnumType {
	return &file_internal_testpb_message_proto_enumTypes[0]
}

func (x Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Enum.Descriptor instead.
func (Enum) EnumDescriptor() ([]byte, []int) {
	return file_internal_testpb_message_proto_rawDescGZIP(), []int{0}
}

type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name              string                            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Str               string                            `protobuf:"bytes,2,opt,name=str,proto3" json:"str,omitempty"`
	I32               int32                             `protobuf:"varint,3,opt,name=i32,proto3" json:"i32,omitempty"`
	I64               int64                             `protobuf:"varint,4,opt,name=i64,proto3" json:"i64,omitempty"`
	U32               uint32                            `protobuf:"varint,5,opt,name=u32,proto3" json:"u32,omitempty"`
	U64               uint64                            `protobuf:"varint,6,opt,name=u64,proto3" json:"u64,omitempty"`
	S32               int32                             `protobuf:"zigzag32,7,opt,name=s32,proto3" json:"s32,omitempty"`
	S64               int64                             `protobuf:"zigzag64,8,opt,name=s64,proto3" json:"s64,omitempty"`
	F32               uint32                            `protobuf:"fixed32,9,opt,name=f32,proto3" json:"f32,omitempty"`
	F64               uint64                            `protobuf:"fixed64,10,opt,name=f64,proto3" json:"f64,omitempty"`
	Sf32              int32                             `protobuf:"fixed32,11,opt,name=sf32,proto3" json:"sf32,omitempty"`
	Sf64              int64                             `protobuf:"fixed64,12,opt,name=sf64,proto3" json:"sf64,omitempty"`
	Bool              bool                              `protobuf:"varint,13,opt,name=bool,proto3" json:"bool,omitempty"`
	Bytes             []byte                            `protobuf:"bytes,14,opt,name=bytes,proto3" json:"bytes,omitempty"`
	Float             float32                           `protobuf:"fixed32,15,opt,name=float,proto3" json:"float,omitempty"`
	Double            float64                           `protobuf:"fixed64,16,opt,name=double,proto3" json:"double,omitempty"`
	RpStr             []string                          `protobuf:"bytes,17,rep,name=rp_str,json=rpStr,proto3" json:"rp_str,omitempty"`
	RpI32             []int32                           `protobuf:"varint,18,rep,packed,name=rp_i32,json=rpI32,proto3" json:"rp_i32,omitempty"`
	RpI64             []int64                           `protobuf:"varint,19,rep,packed,name=rp_i64,json=rpI64,proto3" json:"rp_i64,omitempty"`
	RpU32             []uint32                          `protobuf:"varint,20,rep,packed,name=rp_u32,json=rpU32,proto3" json:"rp_u32,omitempty"`
	RpU64             []uint64                          `protobuf:"varint,21,rep,packed,name=rp_u64,json=rpU64,proto3" json:"rp_u64,omitempty"`
	RpS32             []int32                           `protobuf:"zigzag32,22,rep,packed,name=rp_s32,json=rpS32,proto3" json:"rp_s32,omitempty"`
	RpS64             []int64                           `protobuf:"zigzag64,23,rep,packed,name=rp_s64,json=rpS64,proto3" json:"rp_s64,omitempty"`
	RpF32             []uint32                          `protobuf:"fixed32,24,rep,packed,name=rp_f32,json=rpF32,proto3" json:"rp_f32,omitempty"`
	RpF64             []uint64                          `protobuf:"fixed64,25,rep,packed,name=rp_f64,json=rpF64,proto3" json:"rp_f64,omitempty"`
	RpSf32            []int32                           `protobuf:"fixed32,26,rep,packed,name=rp_sf32,json=rpSf32,proto3" json:"rp_sf32,omitempty"`
	RpSf64            []int64                           `protobuf:"fixed64,27,rep,packed,name=rp_sf64,json=rpSf64,proto3" json:"rp_sf64,omitempty"`
	RpBool            []bool                            `protobuf:"varint,28,rep,packed,name=rp_bool,json=rpBool,proto3" json:"rp_bool,omitempty"`
	RpBytes           [][]byte                          `protobuf:"bytes,29,rep,name=rp_bytes,json=rpBytes,proto3" json:"rp_bytes,omitempty"`
	RpFloat           []float32                         `protobuf:"fixed32,30,rep,packed,name=rp_float,json=rpFloat,proto3" json:"rp_float,omitempty"`
	RpDouble          []float64                         `protobuf:"fixed64,31,rep,packed,name=rp_double,json=rpDouble,proto3" json:"rp_double,omitempty"`
	Timestamp         *timestamppb.Timestamp            `protobuf:"bytes,32,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Duration          *durationpb.Duration              `protobuf:"bytes,33,opt,name=duration,proto3" json:"duration,omitempty"`
	Struct            *structpb.Struct                  `protobuf:"bytes,34,opt,name=struct,proto3" json:"struct,omitempty"`
	RpTimestamp       []*timestamppb.Timestamp          `protobuf:"bytes,35,rep,name=rp_timestamp,json=rpTimestamp,proto3" json:"rp_timestamp,omitempty"`
	RpDuration        []*durationpb.Duration            `protobuf:"bytes,36,rep,name=rp_duration,json=rpDuration,proto3" json:"rp_duration,omitempty"`
	RpStruct          []*structpb.Struct                `protobuf:"bytes,37,rep,name=rp_struct,json=rpStruct,proto3" json:"rp_struct,omitempty"`
	Enum              Enum                              `protobuf:"varint,38,opt,name=enum,proto3,enum=testpb.Enum" json:"enum,omitempty"`
	RpEnum            []Enum                            `protobuf:"varint,39,rep,packed,name=rp_enum,json=rpEnum,proto3,enum=testpb.Enum" json:"rp_enum,omitempty"`
	Sub               *Message                          `protobuf:"bytes,40,opt,name=sub,proto3" json:"sub,omitempty"`
	RpSub             []*Message                        `protobuf:"bytes,41,rep,name=rp_sub,json=rpSub,proto3" json:"rp_sub,omitempty"`
	NoFilter          string                            `protobuf:"bytes,42,opt,name=no_filter,json=noFilter,proto3" json:"no_filter,omitempty"`
	NoFilterMsg       *Message                          `protobuf:"bytes,43,opt,name=no_filter_msg,json=noFilterMsg,proto3" json:"no_filter_msg,omitempty"`
	I32Complexity     int32                             `protobuf:"varint,44,opt,name=i32_complexity,json=i32Complexity,proto3" json:"i32_complexity,omitempty"`
	MapStrStr         map[string]string                 `protobuf:"bytes,45,rep,name=map_str_str,json=mapStrStr,proto3" json:"map_str_str,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapStrI32         map[string]int32                  `protobuf:"bytes,46,rep,name=map_str_i32,json=mapStrI32,proto3" json:"map_str_i32,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapStrI64         map[string]int64                  `protobuf:"bytes,47,rep,name=map_str_i64,json=mapStrI64,proto3" json:"map_str_i64,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapStrU32         map[string]uint32                 `protobuf:"bytes,48,rep,name=map_str_u32,json=mapStrU32,proto3" json:"map_str_u32,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapStrU64         map[string]uint64                 `protobuf:"bytes,49,rep,name=map_str_u64,json=mapStrU64,proto3" json:"map_str_u64,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapStrS32         map[string]int32                  `protobuf:"bytes,50,rep,name=map_str_s32,json=mapStrS32,proto3" json:"map_str_s32,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"zigzag32,2,opt,name=value,proto3"`
	MapStrS64         map[string]int64                  `protobuf:"bytes,51,rep,name=map_str_s64,json=mapStrS64,proto3" json:"map_str_s64,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"zigzag64,2,opt,name=value,proto3"`
	MapStrF32         map[string]uint32                 `protobuf:"bytes,52,rep,name=map_str_f32,json=mapStrF32,proto3" json:"map_str_f32,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	MapStrF64         map[string]uint64                 `protobuf:"bytes,53,rep,name=map_str_f64,json=mapStrF64,proto3" json:"map_str_f64,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	MapStrSf32        map[string]int32                  `protobuf:"bytes,54,rep,name=map_str_sf32,json=mapStrSf32,proto3" json:"map_str_sf32,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	MapStrSf64        map[string]int64                  `protobuf:"bytes,55,rep,name=map_str_sf64,json=mapStrSf64,proto3" json:"map_str_sf64,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	MapStrBool        map[string]bool                   `protobuf:"bytes,56,rep,name=map_str_bool,json=mapStrBool,proto3" json:"map_str_bool,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapStrBytes       map[string][]byte                 `protobuf:"bytes,57,rep,name=map_str_bytes,json=mapStrBytes,proto3" json:"map_str_bytes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapStrFloat       map[string]float32                `protobuf:"bytes,58,rep,name=map_str_float,json=mapStrFloat,proto3" json:"map_str_float,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	MapStrDouble      map[string]float64                `protobuf:"bytes,59,rep,name=map_str_double,json=mapStrDouble,proto3" json:"map_str_double,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	MapStrEnum        map[string]Enum                   `protobuf:"bytes,60,rep,name=map_str_enum,json=mapStrEnum,proto3" json:"map_str_enum,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=testpb.Enum"`
	MapStrMsg         map[string]*Message               `protobuf:"bytes,61,rep,name=map_str_msg,json=mapStrMsg,proto3" json:"map_str_msg,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapStrTimestamp   map[string]*timestamppb.Timestamp `protobuf:"bytes,62,rep,name=map_str_timestamp,json=mapStrTimestamp,proto3" json:"map_str_timestamp,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapStrDuration    map[string]*durationpb.Duration   `protobuf:"bytes,63,rep,name=map_str_duration,json=mapStrDuration,proto3" json:"map_str_duration,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	I32Optional       int32                             `protobuf:"varint,64,opt,name=i32_optional,json=i32Optional,proto3" json:"i32_optional,omitempty"`
	I64Optional       int64                             `protobuf:"varint,65,opt,name=i64_optional,json=i64Optional,proto3" json:"i64_optional,omitempty"`
	U32Optional       uint32                            `protobuf:"varint,66,opt,name=u32_optional,json=u32Optional,proto3" json:"u32_optional,omitempty"`
	U64Optional       uint64                            `protobuf:"varint,67,opt,name=u64_optional,json=u64Optional,proto3" json:"u64_optional,omitempty"`
	S32Optional       int32                             `protobuf:"zigzag32,68,opt,name=s32_optional,json=s32Optional,proto3" json:"s32_optional,omitempty"`
	S64Optional       int64                             `protobuf:"zigzag64,69,opt,name=s64_optional,json=s64Optional,proto3" json:"s64_optional,omitempty"`
	F32Optional       uint32                            `protobuf:"fixed32,70,opt,name=f32_optional,json=f32Optional,proto3" json:"f32_optional,omitempty"`
	F64Optional       uint64                            `protobuf:"fixed64,71,opt,name=f64_optional,json=f64Optional,proto3" json:"f64_optional,omitempty"`
	Sf32Optional      int32                             `protobuf:"fixed32,72,opt,name=sf32_optional,json=sf32Optional,proto3" json:"sf32_optional,omitempty"`
	Sf64Optional      int64                             `protobuf:"fixed64,73,opt,name=sf64_optional,json=sf64Optional,proto3" json:"sf64_optional,omitempty"`
	BoolOptional      bool                              `protobuf:"varint,74,opt,name=bool_optional,json=boolOptional,proto3" json:"bool_optional,omitempty"`
	StrOptional       string                            `protobuf:"bytes,75,opt,name=str_optional,json=strOptional,proto3" json:"str_optional,omitempty"`
	BytesOptional     []byte                            `protobuf:"bytes,76,opt,name=bytes_optional,json=bytesOptional,proto3" json:"bytes_optional,omitempty"`
	FloatOptional     float32                           `protobuf:"fixed32,77,opt,name=float_optional,json=floatOptional,proto3" json:"float_optional,omitempty"`
	DoubleOptional    float64                           `protobuf:"fixed64,78,opt,name=double_optional,json=doubleOptional,proto3" json:"double_optional,omitempty"`
	TimestampOptional *timestamppb.Timestamp            `protobuf:"bytes,79,opt,name=timestamp_optional,json=timestampOptional,proto3" json:"timestamp_optional,omitempty"`
	DurationOptional  *durationpb.Duration              `protobuf:"bytes,80,opt,name=duration_optional,json=durationOptional,proto3" json:"duration_optional,omitempty"`
	StructOptional    *structpb.Struct                  `protobuf:"bytes,81,opt,name=struct_optional,json=structOptional,proto3" json:"struct_optional,omitempty"`
	EnumOptional      Enum                              `protobuf:"varint,82,opt,name=enum_optional,json=enumOptional,proto3,enum=testpb.Enum" json:"enum_optional,omitempty"`
	MsgOptional       *Message                          `protobuf:"bytes,83,opt,name=msg_optional,json=msgOptional,proto3" json:"msg_optional,omitempty"`
	// Types that are assignable to Oneof:
	//
	//	*Message_OneofStr
	//	*Message_OneofI32
	//	*Message_OneofI64
	//	*Message_OneofU32
	//	*Message_OneofU64
	//	*Message_OneofS32
	//	*Message_OneofS64
	//	*Message_OneofF32
	//	*Message_OneofF64
	//	*Message_OneofSf32
	//	*Message_OneofSf64
	//	*Message_OneofBool
	//	*Message_OneofBytes
	//	*Message_OneofFloat
	//	*Message_OneofDouble
	//	*Message_OneofTimestamp
	//	*Message_OneofDuration
	//	*Message_OneofStruct
	//	*Message_OneofEnum
	//	*Message_OneofMsg
	Oneof        isMessage_Oneof `protobuf_oneof:"oneof"`
	InputOnlyStr string          `protobuf:"bytes,104,opt,name=input_only_str,json=inputOnlyStr,proto3" json:"input_only_str,omitempty"`
	// This field is a keyword in the query language.
	AND string `protobuf:"bytes,105,opt,name=AND,proto3" json:"AND,omitempty"`
	// IN is a keyword in the query language.
	NOT *Message `protobuf:"bytes,106,opt,name=NOT,proto3" json:"NOT,omitempty"`
	// This field is a keyword in the query language.
	OR string `protobuf:"bytes,107,opt,name=OR,proto3" json:"OR,omitempty"`
	// This field is a keyword in the query language.
	IN                string                 `protobuf:"bytes,108,opt,name=IN,proto3" json:"IN,omitempty"`
	NonEmptyStr       string                 `protobuf:"bytes,109,opt,name=non_empty_str,json=nonEmptyStr,proto3" json:"non_empty_str,omitempty"`
	NonEmptyI32       int32                  `protobuf:"varint,110,opt,name=non_empty_i32,json=nonEmptyI32,proto3" json:"non_empty_i32,omitempty"`
	NonEmptyI64       int64                  `protobuf:"varint,111,opt,name=non_empty_i64,json=nonEmptyI64,proto3" json:"non_empty_i64,omitempty"`
	NonEmptyU32       uint32                 `protobuf:"varint,112,opt,name=non_empty_u32,json=nonEmptyU32,proto3" json:"non_empty_u32,omitempty"`
	NonEmptyU64       uint64                 `protobuf:"varint,113,opt,name=non_empty_u64,json=nonEmptyU64,proto3" json:"non_empty_u64,omitempty"`
	NonEmptyS32       int32                  `protobuf:"zigzag32,114,opt,name=non_empty_s32,json=nonEmptyS32,proto3" json:"non_empty_s32,omitempty"`
	NonEmptyS64       int64                  `protobuf:"zigzag64,115,opt,name=non_empty_s64,json=nonEmptyS64,proto3" json:"non_empty_s64,omitempty"`
	NonEmptyF32       uint32                 `protobuf:"fixed32,116,opt,name=non_empty_f32,json=nonEmptyF32,proto3" json:"non_empty_f32,omitempty"`
	NonEmptyF64       uint64                 `protobuf:"fixed64,117,opt,name=non_empty_f64,json=nonEmptyF64,proto3" json:"non_empty_f64,omitempty"`
	NonEmptySf32      int32                  `protobuf:"fixed32,118,opt,name=non_empty_sf32,json=nonEmptySf32,proto3" json:"non_empty_sf32,omitempty"`
	NonEmptySf64      int64                  `protobuf:"fixed64,119,opt,name=non_empty_sf64,json=nonEmptySf64,proto3" json:"non_empty_sf64,omitempty"`
	NonEmptyBool      bool                   `protobuf:"varint,120,opt,name=non_empty_bool,json=nonEmptyBool,proto3" json:"non_empty_bool,omitempty"`
	NonEmptyBytes     []byte                 `protobuf:"bytes,121,opt,name=non_empty_bytes,json=nonEmptyBytes,proto3" json:"non_empty_bytes,omitempty"`
	NonEmptyFloat     float32                `protobuf:"fixed32,122,opt,name=non_empty_float,json=nonEmptyFloat,proto3" json:"non_empty_float,omitempty"`
	NonEmptyDouble    float64                `protobuf:"fixed64,123,opt,name=non_empty_double,json=nonEmptyDouble,proto3" json:"non_empty_double,omitempty"`
	NonEmptyTimestamp *timestamppb.Timestamp `protobuf:"bytes,124,opt,name=non_empty_timestamp,json=nonEmptyTimestamp,proto3" json:"non_empty_timestamp,omitempty"`
	NonEmptyDuration  *durationpb.Duration   `protobuf:"bytes,125,opt,name=non_empty_duration,json=nonEmptyDuration,proto3" json:"non_empty_duration,omitempty"`
	NonEmptyStruct    *structpb.Struct       `protobuf:"bytes,126,opt,name=non_empty_struct,json=nonEmptyStruct,proto3" json:"non_empty_struct,omitempty"`
	NonEmptyEnum      Enum                   `protobuf:"varint,127,opt,name=non_empty_enum,json=nonEmptyEnum,proto3,enum=testpb.Enum" json:"non_empty_enum,omitempty"`
	Point             *Point                 `protobuf:"bytes,128,opt,name=point,proto3" json:"point,omitempty"`
	MapI32Str         map[int32]string       `protobuf:"bytes,129,rep,name=map_i32_str,json=mapI32Str,proto3" json:"map_i32_str,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PointNonTraversal *Point                 `protobuf:"bytes,130,opt,name=point_non_traversal,json=pointNonTraversal,proto3" json:"point_non_traversal,omitempty"`
	NoSearch          string                 `protobuf:"bytes,131,opt,name=no_search,json=noSearch,proto3" json:"no_search,omitempty"`
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_testpb_message_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_internal_testpb_message_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_internal_testpb_message_proto_rawDescGZIP(), []int{0}
}

func (x *Message) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Message) GetStr() string {
	if x != nil {
		return x.Str
	}
	return ""
}

func (x *Message) GetI32() int32 {
	if x != nil {
		return x.I32
	}
	return 0
}

func (x *Message) GetI64() int64 {
	if x != nil {
		return x.I64
	}
	return 0
}

func (x *Message) GetU32() uint32 {
	if x != nil {
		return x.U32
	}
	return 0
}

func (x *Message) GetU64() uint64 {
	if x != nil {
		return x.U64
	}
	return 0
}

func (x *Message) GetS32() int32 {
	if x != nil {
		return x.S32
	}
	return 0
}

func (x *Message) GetS64() int64 {
	if x != nil {
		return x.S64
	}
	return 0
}

func (x *Message) GetF32() uint32 {
	if x != nil {
		return x.F32
	}
	return 0
}

func (x *Message) GetF64() uint64 {
	if x != nil {
		return x.F64
	}
	return 0
}

func (x *Message) GetSf32() int32 {
	if x != nil {
		return x.Sf32
	}
	return 0
}

func (x *Message) GetSf64() int64 {
	if x != nil {
		return x.Sf64
	}
	return 0
}

func (x *Message) GetBool() bool {
	if x != nil {
		return x.Bool
	}
	return false
}

func (x *Message) GetBytes() []byte {
	if x != nil {
		return x.Bytes
	}
	return nil
}

func (x *Message) GetFloat() float32 {
	if x != nil {
		return x.Float
	}
	return 0
}

func (x *Message) GetDouble() float64 {
	if x != nil {
		return x.Double
	}
	return 0
}

func (x *Message) GetRpStr() []string {
	if x != nil {
		return x.RpStr
	}
	return nil
}

func (x *Message) GetRpI32() []int32 {
	if x != nil {
		return x.RpI32
	}
	return nil
}

func (x *Message) GetRpI64() []int64 {
	if x != nil {
		return x.RpI64
	}
	return nil
}

func (x *Message) GetRpU32() []uint32 {
	if x != nil {
		return x.RpU32
	}
	return nil
}

func (x *Message) GetRpU64() []uint64 {
	if x != nil {
		return x.RpU64
	}
	return nil
}

func (x *Message) GetRpS32() []int32 {
	if x != nil {
		return x.RpS32
	}
	return nil
}

func (x *Message) GetRpS64() []int64 {
	if x != nil {
		return x.RpS64
	}
	return nil
}

func (x *Message) GetRpF32() []uint32 {
	if x != nil {
		return x.RpF32
	}
	return nil
}

func (x *Message) GetRpF64() []uint64 {
	if x != nil {
		return x.RpF64
	}
	return nil
}

func (x *Message) GetRpSf32() []int32 {
	if x != nil {
		return x.RpSf32
	}
	return nil
}

func (x *Message) GetRpSf64() []int64 {
	if x != nil {
		return x.RpSf64
	}
	return nil
}

func (x *Message) GetRpBool() []bool {
	if x != nil {
		return x.RpBool
	}
	return nil
}

func (x *Message) GetRpBytes() [][]byte {
	if x != nil {
		return x.RpBytes
	}
	return nil
}

func (x *Message) GetRpFloat() []float32 {
	if x != nil {
		return x.RpFloat
	}
	return nil
}

func (x *Message) GetRpDouble() []float64 {
	if x != nil {
		return x.RpDouble
	}
	return nil
}

func (x *Message) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *Message) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *Message) GetStruct() *structpb.Struct {
	if x != nil {
		return x.Struct
	}
	return nil
}

func (x *Message) GetRpTimestamp() []*timestamppb.Timestamp {
	if x != nil {
		return x.RpTimestamp
	}
	return nil
}

func (x *Message) GetRpDuration() []*durationpb.Duration {
	if x != nil {
		return x.RpDuration
	}
	return nil
}

func (x *Message) GetRpStruct() []*structpb.Struct {
	if x != nil {
		return x.RpStruct
	}
	return nil
}

func (x *Message) GetEnum() Enum {
	if x != nil {
		return x.Enum
	}
	return Enum_UNKNOWN
}

func (x *Message) GetRpEnum() []Enum {
	if x != nil {
		return x.RpEnum
	}
	return nil
}

func (x *Message) GetSub() *Message {
	if x != nil {
		return x.Sub
	}
	return nil
}

func (x *Message) GetRpSub() []*Message {
	if x != nil {
		return x.RpSub
	}
	return nil
}

func (x *Message) GetNoFilter() string {
	if x != nil {
		return x.NoFilter
	}
	return ""
}

func (x *Message) GetNoFilterMsg() *Message {
	if x != nil {
		return x.NoFilterMsg
	}
	return nil
}

func (x *Message) GetI32Complexity() int32 {
	if x != nil {
		return x.I32Complexity
	}
	return 0
}

func (x *Message) GetMapStrStr() map[string]string {
	if x != nil {
		return x.MapStrStr
	}
	return nil
}

func (x *Message) GetMapStrI32() map[string]int32 {
	if x != nil {
		return x.MapStrI32
	}
	return nil
}

func (x *Message) GetMapStrI64() map[string]int64 {
	if x != nil {
		return x.MapStrI64
	}
	return nil
}

func (x *Message) GetMapStrU32() map[string]uint32 {
	if x != nil {
		return x.MapStrU32
	}
	return nil
}

func (x *Message) GetMapStrU64() map[string]uint64 {
	if x != nil {
		return x.MapStrU64
	}
	return nil
}

func (x *Message) GetMapStrS32() map[string]int32 {
	if x != nil {
		return x.MapStrS32
	}
	return nil
}

func (x *Message) GetMapStrS64() map[string]int64 {
	if x != nil {
		return x.MapStrS64
	}
	return nil
}

func (x *Message) GetMapStrF32() map[string]uint32 {
	if x != nil {
		return x.MapStrF32
	}
	return nil
}

func (x *Message) GetMapStrF64() map[string]uint64 {
	if x != nil {
		return x.MapStrF64
	}
	return nil
}

func (x *Message) GetMapStrSf32() map[string]int32 {
	if x != nil {
		return x.MapStrSf32
	}
	return nil
}

func (x *Message) GetMapStrSf64() map[string]int64 {
	if x != nil {
		return x.MapStrSf64
	}
	return nil
}

func (x *Message) GetMapStrBool() map[string]bool {
	if x != nil {
		return x.MapStrBool
	}
	return nil
}

func (x *Message) GetMapStrBytes() map[string][]byte {
	if x != nil {
		return x.MapStrBytes
	}
	return nil
}

func (x *Message) GetMapStrFloat() map[string]float32 {
	if x != nil {
		return x.MapStrFloat
	}
	return nil
}

func (x *Message) GetMapStrDouble() map[string]float64 {
	if x != nil {
		return x.MapStrDouble
	}
	return nil
}

func (x *Message) GetMapStrEnum() map[string]Enum {
	if x != nil {
		return x.MapStrEnum
	}
	return nil
}

func (x *Message) GetMapStrMsg() map[string]*Message {
	if x != nil {
		return x.MapStrMsg
	}
	return nil
}

func (x *Message) GetMapStrTimestamp() map[string]*timestamppb.Timestamp {
	if x != nil {
		return x.MapStrTimestamp
	}
	return nil
}

func (x *Message) GetMapStrDuration() map[string]*durationpb.Duration {
	if x != nil {
		return x.MapStrDuration
	}
	return nil
}

func (x *Message) GetI32Optional() int32 {
	if x != nil {
		return x.I32Optional
	}
	return 0
}

func (x *Message) GetI64Optional() int64 {
	if x != nil {
		return x.I64Optional
	}
	return 0
}

func (x *Message) GetU32Optional() uint32 {
	if x != nil {
		return x.U32Optional
	}
	return 0
}

func (x *Message) GetU64Optional() uint64 {
	if x != nil {
		return x.U64Optional
	}
	return 0
}

func (x *Message) GetS32Optional() int32 {
	if x != nil {
		return x.S32Optional
	}
	return 0
}

func (x *Message) GetS64Optional() int64 {
	if x != nil {
		return x.S64Optional
	}
	return 0
}

func (x *Message) GetF32Optional() uint32 {
	if x != nil {
		return x.F32Optional
	}
	return 0
}

func (x *Message) GetF64Optional() uint64 {
	if x != nil {
		return x.F64Optional
	}
	return 0
}

func (x *Message) GetSf32Optional() int32 {
	if x != nil {
		return x.Sf32Optional
	}
	return 0
}

func (x *Message) GetSf64Optional() int64 {
	if x != nil {
		return x.Sf64Optional
	}
	return 0
}

func (x *Message) GetBoolOptional() bool {
	if x != nil {
		return x.BoolOptional
	}
	return false
}

func (x *Message) GetStrOptional() string {
	if x != nil {
		return x.StrOptional
	}
	return ""
}

func (x *Message) GetBytesOptional() []byte {
	if x != nil {
		return x.BytesOptional
	}
	return nil
}

func (x *Message) GetFloatOptional() float32 {
	if x != nil {
		return x.FloatOptional
	}
	return 0
}

func (x *Message) GetDoubleOptional() float64 {
	if x != nil {
		return x.DoubleOptional
	}
	return 0
}

func (x *Message) GetTimestampOptional() *timestamppb.Timestamp {
	if x != nil {
		return x.TimestampOptional
	}
	return nil
}

func (x *Message) GetDurationOptional() *durationpb.Duration {
	if x != nil {
		return x.DurationOptional
	}
	return nil
}

func (x *Message) GetStructOptional() *structpb.Struct {
	if x != nil {
		return x.StructOptional
	}
	return nil
}

func (x *Message) GetEnumOptional() Enum {
	if x != nil {
		return x.EnumOptional
	}
	return Enum_UNKNOWN
}

func (x *Message) GetMsgOptional() *Message {
	if x != nil {
		return x.MsgOptional
	}
	return nil
}

func (m *Message) GetOneof() isMessage_Oneof {
	if m != nil {
		return m.Oneof
	}
	return nil
}

func (x *Message) GetOneofStr() string {
	if x, ok := x.GetOneof().(*Message_OneofStr); ok {
		return x.OneofStr
	}
	return ""
}

func (x *Message) GetOneofI32() int32 {
	if x, ok := x.GetOneof().(*Message_OneofI32); ok {
		return x.OneofI32
	}
	return 0
}

func (x *Message) GetOneofI64() int64 {
	if x, ok := x.GetOneof().(*Message_OneofI64); ok {
		return x.OneofI64
	}
	return 0
}

func (x *Message) GetOneofU32() uint32 {
	if x, ok := x.GetOneof().(*Message_OneofU32); ok {
		return x.OneofU32
	}
	return 0
}

func (x *Message) GetOneofU64() uint64 {
	if x, ok := x.GetOneof().(*Message_OneofU64); ok {
		return x.OneofU64
	}
	return 0
}

func (x *Message) GetOneofS32() int32 {
	if x, ok := x.GetOneof().(*Message_OneofS32); ok {
		return x.OneofS32
	}
	return 0
}

func (x *Message) GetOneofS64() int64 {
	if x, ok := x.GetOneof().(*Message_OneofS64); ok {
		return x.OneofS64
	}
	return 0
}

func (x *Message) GetOneofF32() uint32 {
	if x, ok := x.GetOneof().(*Message_OneofF32); ok {
		return x.OneofF32
	}
	return 0
}

func (x *Message) GetOneofF64() uint64 {
	if x, ok := x.GetOneof().(*Message_OneofF64); ok {
		return x.OneofF64
	}
	return 0
}

func (x *Message) GetOneofSf32() int32 {
	if x, ok := x.GetOneof().(*Message_OneofSf32); ok {
		return x.OneofSf32
	}
	return 0
}

func (x *Message) GetOneofSf64() int64 {
	if x, ok := x.GetOneof().(*Message_OneofSf64); ok {
		return x.OneofSf64
	}
	return 0
}

func (x *Message) GetOneofBool() bool {
	if x, ok := x.GetOneof().(*Message_OneofBool); ok {
		return x.OneofBool
	}
	return false
}

func (x *Message) GetOneofBytes() []byte {
	if x, ok := x.GetOneof().(*Message_OneofBytes); ok {
		return x.OneofBytes
	}
	return nil
}

func (x *Message) GetOneofFloat() float32 {
	if x, ok := x.GetOneof().(*Message_OneofFloat); ok {
		return x.OneofFloat
	}
	return 0
}

func (x *Message) GetOneofDouble() float64 {
	if x, ok := x.GetOneof().(*Message_OneofDouble); ok {
		return x.OneofDouble
	}
	return 0
}

func (x *Message) GetOneofTimestamp() *timestamppb.Timestamp {
	if x, ok := x.GetOneof().(*Message_OneofTimestamp); ok {
		return x.OneofTimestamp
	}
	return nil
}

func (x *Message) GetOneofDuration() *durationpb.Duration {
	if x, ok := x.GetOneof().(*Message_OneofDuration); ok {
		return x.OneofDuration
	}
	return nil
}

func (x *Message) GetOneofStruct() *structpb.Struct {
	if x, ok := x.GetOneof().(*Message_OneofStruct); ok {
		return x.OneofStruct
	}
	return nil
}

func (x *Message) GetOneofEnum() Enum {
	if x, ok := x.GetOneof().(*Message_OneofEnum); ok {
		return x.OneofEnum
	}
	return Enum_UNKNOWN
}

func (x *Message) GetOneofMsg() *Message {
	if x, ok := x.GetOneof().(*Message_OneofMsg); ok {
		return x.OneofMsg
	}
	return nil
}

func (x *Message) GetInputOnlyStr() string {
	if x != nil {
		return x.InputOnlyStr
	}
	return ""
}

func (x *Message) GetAND() string {
	if x != nil {
		return x.AND
	}
	return ""
}

func (x *Message) GetNOT() *Message {
	if x != nil {
		return x.NOT
	}
	return nil
}

func (x *Message) GetOR() string {
	if x != nil {
		return x.OR
	}
	return ""
}

func (x *Message) GetIN() string {
	if x != nil {
		return x.IN
	}
	return ""
}

func (x *Message) GetNonEmptyStr() string {
	if x != nil {
		return x.NonEmptyStr
	}
	return ""
}

func (x *Message) GetNonEmptyI32() int32 {
	if x != nil {
		return x.NonEmptyI32
	}
	return 0
}

func (x *Message) GetNonEmptyI64() int64 {
	if x != nil {
		return x.NonEmptyI64
	}
	return 0
}

func (x *Message) GetNonEmptyU32() uint32 {
	if x != nil {
		return x.NonEmptyU32
	}
	return 0
}

func (x *Message) GetNonEmptyU64() uint64 {
	if x != nil {
		return x.NonEmptyU64
	}
	return 0
}

func (x *Message) GetNonEmptyS32() int32 {
	if x != nil {
		return x.NonEmptyS32
	}
	return 0
}

func (x *Message) GetNonEmptyS64() int64 {
	if x != nil {
		return x.NonEmptyS64
	}
	return 0
}

func (x *Message) GetNonEmptyF32() uint32 {
	if x != nil {
		return x.NonEmptyF32
	}
	return 0
}

func (x *Message) GetNonEmptyF64() uint64 {
	if x != nil {
		return x.NonEmptyF64
	}
	return 0
}

func (x *Message) GetNonEmptySf32() int32 {
	if x != nil {
		return x.NonEmptySf32
	}
	return 0
}

func (x *Message) GetNonEmptySf64() int64 {
	if x != nil {
		return x.NonEmptySf64
	}
	return 0
}

func (x *Message) GetNonEmptyBool() bool {
	if x != nil {
		return x.NonEmptyBool
	}
	return false
}

func (x *Message) GetNonEmptyBytes() []byte {
	if x != nil {
		return x.NonEmptyBytes
	}
	return nil
}

func (x *Message) GetNonEmptyFloat() float32 {
	if x != nil {
		return x.NonEmptyFloat
	}
	return 0
}

func (x *Message) GetNonEmptyDouble() float64 {
	if x != nil {
		return x.NonEmptyDouble
	}
	return 0
}

func (x *Message) GetNonEmptyTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.NonEmptyTimestamp
	}
	return nil
}

func (x *Message) GetNonEmptyDuration() *durationpb.Duration {
	if x != nil {
		return x.NonEmptyDuration
	}
	return nil
}

func (x *Message) GetNonEmptyStruct() *structpb.Struct {
	if x != nil {
		return x.NonEmptyStruct
	}
	return nil
}

func (x *Message) GetNonEmptyEnum() Enum {
	if x != nil {
		return x.NonEmptyEnum
	}
	return Enum_UNKNOWN
}

func (x *Message) GetPoint() *Point {
	if x != nil {
		return x.Point
	}
	return nil
}

func (x *Message) GetMapI32Str() map[int32]string {
	if x != nil {
		return x.MapI32Str
	}
	return nil
}

func (x *Message) GetPointNonTraversal() *Point {
	if x != nil {
		return x.PointNonTraversal
	}
	return nil
}

func (x *Message) GetNoSearch() string {
	if x != nil {
		return x.NoSearch
	}
	return ""
}

type isMessage_Oneof interface {
	isMessage_Oneof()
}

type Message_OneofStr struct {
	OneofStr string `protobuf:"bytes,84,opt,name=oneof_str,json=oneofStr,proto3,oneof"`
}

type Message_OneofI32 struct {
	OneofI32 int32 `protobuf:"varint,85,opt,name=oneof_i32,json=oneofI32,proto3,oneof"`
}

type Message_OneofI64 struct {
	OneofI64 int64 `protobuf:"varint,86,opt,name=oneof_i64,json=oneofI64,proto3,oneof"`
}

type Message_OneofU32 struct {
	OneofU32 uint32 `protobuf:"varint,87,opt,name=oneof_u32,json=oneofU32,proto3,oneof"`
}

type Message_OneofU64 struct {
	OneofU64 uint64 `protobuf:"varint,88,opt,name=oneof_u64,json=oneofU64,proto3,oneof"`
}

type Message_OneofS32 struct {
	OneofS32 int32 `protobuf:"zigzag32,89,opt,name=oneof_s32,json=oneofS32,proto3,oneof"`
}

type Message_OneofS64 struct {
	OneofS64 int64 `protobuf:"zigzag64,90,opt,name=oneof_s64,json=oneofS64,proto3,oneof"`
}

type Message_OneofF32 struct {
	OneofF32 uint32 `protobuf:"fixed32,91,opt,name=oneof_f32,json=oneofF32,proto3,oneof"`
}

type Message_OneofF64 struct {
	OneofF64 uint64 `protobuf:"fixed64,92,opt,name=oneof_f64,json=oneofF64,proto3,oneof"`
}

type Message_OneofSf32 struct {
	OneofSf32 int32 `protobuf:"fixed32,93,opt,name=oneof_sf32,json=oneofSf32,proto3,oneof"`
}

type Message_OneofSf64 struct {
	OneofSf64 int64 `protobuf:"fixed64,94,opt,name=oneof_sf64,json=oneofSf64,proto3,oneof"`
}

type Message_OneofBool struct {
	OneofBool bool `protobuf:"varint,95,opt,name=oneof_bool,json=oneofBool,proto3,oneof"`
}

type Message_OneofBytes struct {
	OneofBytes []byte `protobuf:"bytes,96,opt,name=oneof_bytes,json=oneofBytes,proto3,oneof"`
}

type Message_OneofFloat struct {
	OneofFloat float32 `protobuf:"fixed32,97,opt,name=oneof_float,json=oneofFloat,proto3,oneof"`
}

type Message_OneofDouble struct {
	OneofDouble float64 `protobuf:"fixed64,98,opt,name=oneof_double,json=oneofDouble,proto3,oneof"`
}

type Message_OneofTimestamp struct {
	OneofTimestamp *timestamppb.Timestamp `protobuf:"bytes,99,opt,name=oneof_timestamp,json=oneofTimestamp,proto3,oneof"`
}

type Message_OneofDuration struct {
	OneofDuration *durationpb.Duration `protobuf:"bytes,100,opt,name=oneof_duration,json=oneofDuration,proto3,oneof"`
}

type Message_OneofStruct struct {
	OneofStruct *structpb.Struct `protobuf:"bytes,101,opt,name=oneof_struct,json=oneofStruct,proto3,oneof"`
}

type Message_OneofEnum struct {
	OneofEnum Enum `protobuf:"varint,102,opt,name=oneof_enum,json=oneofEnum,proto3,enum=testpb.Enum,oneof"`
}

type Message_OneofMsg struct {
	OneofMsg *Message `protobuf:"bytes,103,opt,name=oneof_msg,json=oneofMsg,proto3,oneof"`
}

func (*Message_OneofStr) isMessage_Oneof() {}

func (*Message_OneofI32) isMessage_Oneof() {}

func (*Message_OneofI64) isMessage_Oneof() {}

func (*Message_OneofU32) isMessage_Oneof() {}

func (*Message_OneofU64) isMessage_Oneof() {}

func (*Message_OneofS32) isMessage_Oneof() {}

func (*Message_OneofS64) isMessage_Oneof() {}

func (*Message_OneofF32) isMessage_Oneof() {}

func (*Message_OneofF64) isMessage_Oneof() {}

func (*Message_OneofSf32) isMessage_Oneof() {}

func (*Message_OneofSf64) isMessage_Oneof() {}

func (*Message_OneofBool) isMessage_Oneof() {}

func (*Message_OneofBytes) isMessage_Oneof() {}

func (*Message_OneofFloat) isMessage_Oneof() {}

func (*Message_OneofDouble) isMessage_Oneof() {}

func (*Message_OneofTimestamp) isMessage_Oneof() {}

func (*Message_OneofDuration) isMessage_Oneof() {}

func (*Message_OneofStruct) isMessage_Oneof() {}

func (*Message_OneofEnum) isMessage_Oneof() {}

func (*Message_OneofMsg) isMessage_Oneof() {}

type Point struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X float32 `protobuf:"fixed32,1,opt,name=x,proto3" json:"x,omitempty"`
	Y float32 `protobuf:"fixed32,2,opt,name=y,proto3" json:"y,omitempty"`
}

func (x *Point) Reset() {
	*x = Point{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_testpb_message_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Point) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Point) ProtoMessage() {}

func (x *Point) ProtoReflect() protoreflect.Message {
	mi := &file_internal_testpb_message_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Point.ProtoReflect.Descriptor instead.
func (*Point) Descriptor() ([]byte, []int) {
	return file_internal_testpb_message_proto_rawDescGZIP(), []int{1}
}

func (x *Point) GetX() float32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Point) GetY() float32 {
	if x != nil {
		return x.Y
	}
	return 0
}

var File_internal_testpb_message_proto protoreflect.FileDescriptor

var file_internal_testpb_message_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x70,
	0x62, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x06, 0x74, 0x65, 0x73, 0x74, 0x70, 0x62, 0x1a, 0x1c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb6, 0x36, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x74, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x73, 0x74, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x33, 0x32, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x69, 0x33, 0x32, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x36, 0x34,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x69, 0x36, 0x34, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x33, 0x32, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x75, 0x33, 0x32, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x36, 0x34, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x75, 0x36, 0x34, 0x12,
	0x10, 0x0a, 0x03, 0x73, 0x33, 0x32, 0x18, 0x07, 0x20, 0x01, 0x28, 0x11, 0x52, 0x03, 0x73, 0x33,
	0x32, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x36, 0x34, 0x18, 0x08, 0x20, 0x01, 0x28, 0x12, 0x52, 0x03,
	0x73, 0x36, 0x34, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x33, 0x32, 0x18, 0x09, 0x20, 0x01, 0x28, 0x07,
	0x52, 0x03, 0x66, 0x33, 0x32, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x36, 0x34, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x06, 0x52, 0x03, 0x66, 0x36, 0x34, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x66, 0x33, 0x32, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0f, 0x52, 0x04, 0x73, 0x66, 0x33, 0x32, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x66, 0x36, 0x34, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x10, 0x52, 0x04, 0x73, 0x66, 0x36, 0x34, 0x12,
	0x12, 0x0a, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x62,
	0x6f, 0x6f, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x6f,
	0x61, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x06, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x70, 0x5f, 0x73, 0x74,
	0x72, 0x18, 0x11, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x72, 0x70, 0x53, 0x74, 0x72, 0x12, 0x15,
	0x0a, 0x06, 0x72, 0x70, 0x5f, 0x69, 0x33, 0x32, 0x18, 0x12, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05,
	0x72, 0x70, 0x49, 0x33, 0x32, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x70, 0x5f, 0x69, 0x36, 0x34, 0x18,
	0x13, 0x20, 0x03, 0x28, 0x03, 0x52, 0x05, 0x72, 0x70, 0x49, 0x36, 0x34, 0x12, 0x15, 0x0a, 0x06,
	0x72, 0x70, 0x5f, 0x75, 0x33, 0x32, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x05, 0x72, 0x70,
	0x55, 0x33, 0x32, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x70, 0x5f, 0x75, 0x36, 0x34, 0x18, 0x15, 0x20,
	0x03, 0x28, 0x04, 0x52, 0x05, 0x72, 0x70, 0x55, 0x36, 0x34, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x70,
	0x5f, 0x73, 0x33, 0x32, 0x18, 0x16, 0x20, 0x03, 0x28, 0x11, 0x52, 0x05, 0x72, 0x70, 0x53, 0x33,
	0x32, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x70, 0x5f, 0x73, 0x36, 0x34, 0x18, 0x17, 0x20, 0x03, 0x28,
	0x12, 0x52, 0x05, 0x72, 0x70, 0x53, 0x36, 0x34, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x70, 0x5f, 0x66,
	0x33, 0x32, 0x18, 0x18, 0x20, 0x03, 0x28, 0x07, 0x52, 0x05, 0x72, 0x70, 0x46, 0x33, 0x32, 0x12,
	0x15, 0x0a, 0x06, 0x72, 0x70, 0x5f, 0x66, 0x36, 0x34, 0x18, 0x19, 0x20, 0x03, 0x28, 0x06, 0x52,
	0x05, 0x72, 0x70, 0x46, 0x36, 0x34, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x70, 0x5f, 0x73, 0x66, 0x33,
	0x32, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0f, 0x52, 0x06, 0x72, 0x70, 0x53, 0x66, 0x33, 0x32, 0x12,
	0x17, 0x0a, 0x07, 0x72, 0x70, 0x5f, 0x73, 0x66, 0x36, 0x34, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x10,
	0x52, 0x06, 0x72, 0x70, 0x53, 0x66, 0x36, 0x34, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x70, 0x5f, 0x62,
	0x6f, 0x6f, 0x6c, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x08, 0x52, 0x06, 0x72, 0x70, 0x42, 0x6f, 0x6f,
	0x6c, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x70, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x1d, 0x20,
	0x03, 0x28, 0x0c, 0x52, 0x07, 0x72, 0x70, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08,
	0x72, 0x70, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x02, 0x52, 0x07,
	0x72, 0x70, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x70, 0x5f, 0x64, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x01, 0x52, 0x08, 0x72, 0x70, 0x44, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x35,
	0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x18,
	0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x06,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x3d, 0x0a, 0x0c, 0x72, 0x70, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x23, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x72, 0x70, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x3a, 0x0a, 0x0b, 0x72, 0x70, 0x5f, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x24, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x72, 0x70, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x34, 0x0a, 0x09, 0x72, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x18, 0x25,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x08, 0x72,
	0x70, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x20, 0x0a, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x18,
	0x26, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x45,
	0x6e, 0x75, 0x6d, 0x52, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x12, 0x25, 0x0a, 0x07, 0x72, 0x70, 0x5f,
	0x65, 0x6e, 0x75, 0x6d, 0x18, 0x27, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x70, 0x62, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x06, 0x72, 0x70, 0x45, 0x6e, 0x75, 0x6d,
	0x12, 0x21, 0x0a, 0x03, 0x73, 0x75, 0x62, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x03,
	0x73, 0x75, 0x62, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x70, 0x5f, 0x73, 0x75, 0x62, 0x18, 0x29, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x05, 0x72, 0x70, 0x53, 0x75, 0x62, 0x12, 0x27, 0x0a, 0x09, 0x6e,
	0x6f, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0xa8, 0xec, 0xd7, 0x4d, 0x01, 0xa8, 0xec, 0xd7, 0x4d, 0x02, 0x52, 0x08, 0x6e, 0x6f, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x0d, 0x6e, 0x6f, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x0a, 0xa8, 0xec,
	0xd7, 0x4d, 0x01, 0xa8, 0xec, 0xd7, 0x4d, 0x02, 0x52, 0x0b, 0x6e, 0x6f, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x2c, 0x0a, 0x0e, 0x69, 0x33, 0x32, 0x5f, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x78, 0x69, 0x74, 0x79, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x05, 0x42, 0x05, 0xb0,
	0xec, 0xd7, 0x4d, 0x2c, 0x52, 0x0d, 0x69, 0x33, 0x32, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78,
	0x69, 0x74, 0x79, 0x12, 0x3e, 0x0a, 0x0b, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x5f, 0x73,
	0x74, 0x72, 0x18, 0x2d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70,
	0x62, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72,
	0x53, 0x74, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x6d, 0x61, 0x70, 0x53, 0x74, 0x72,
	0x53, 0x74, 0x72, 0x12, 0x3e, 0x0a, 0x0b, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x5f, 0x69,
	0x33, 0x32, 0x18, 0x2e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70,
	0x62, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72,
	0x49, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x6d, 0x61, 0x70, 0x53, 0x74, 0x72,
	0x49, 0x33, 0x32, 0x12, 0x3e, 0x0a, 0x0b, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x5f, 0x69,
	0x36, 0x34, 0x18, 0x2f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70,
	0x62, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72,
	0x49, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x6d, 0x61, 0x70, 0x53, 0x74, 0x72,
	0x49, 0x36, 0x34, 0x12, 0x3e, 0x0a, 0x0b, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x5f, 0x75,
	0x33, 0x32, 0x18, 0x30, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70,
	0x62, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72,
	0x55, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x6d, 0x61, 0x70, 0x53, 0x74, 0x72,
	0x55, 0x33, 0x32, 0x12, 0x3e, 0x0a, 0x0b, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x5f, 0x75,
	0x36, 0x34, 0x18, 0x31, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70,
	0x62, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72,
	0x55, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x6d, 0x61, 0x70, 0x53, 0x74, 0x72,
	0x55, 0x36, 0x34, 0x12, 0x3e, 0x0a, 0x0b, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x5f, 0x73,
	0x33, 0x32, 0x18, 0x32, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70,
	0x62, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72,
	0x53, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x6d, 0x61, 0x70, 0x53, 0x74, 0x72,
	0x53, 0x33, 0x32, 0x12, 0x3e, 0x0a, 0x0b, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x5f, 0x73,
	0x36, 0x34, 0x18, 0x33, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70,
	0x62, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72,
	0x53, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x6d, 0x61, 0x70, 0x53, 0x74, 0x72,
	0x53, 0x36, 0x34, 0x12, 0x3e, 0x0a, 0x0b, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x5f, 0x66,
	0x33, 0x32, 0x18, 0x34, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70,
	0x62, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72,
	0x46, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x6d, 0x61, 0x70, 0x53, 0x74, 0x72,
	0x46, 0x33, 0x32, 0x12, 0x3e, 0x0a, 0x0b, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x5f, 0x66,
	0x36, 0x34, 0x18, 0x35, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70,
	0x62, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72,
	0x46, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x6d, 0x61, 0x70, 0x53, 0x74, 0x72,
	0x46, 0x36, 0x34, 0x12, 0x41, 0x0a, 0x0c, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x5f, 0x73,
	0x66, 0x33, 0x32, 0x18, 0x36, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x70, 0x62, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74,
	0x72, 0x53, 0x66, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x6d, 0x61, 0x70, 0x53,
	0x74, 0x72, 0x53, 0x66, 0x33, 0x32, 0x12, 0x41, 0x0a, 0x0c, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74,
	0x72, 0x5f, 0x73, 0x66, 0x36, 0x34, 0x18, 0x37, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x61,
	0x70, 0x53, 0x74, 0x72, 0x53, 0x66, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x6d,
	0x61, 0x70, 0x53, 0x74, 0x72, 0x53, 0x66, 0x36, 0x34, 0x12, 0x41, 0x0a, 0x0c, 0x6d, 0x61, 0x70,
	0x5f, 0x73, 0x74, 0x72, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x38, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x42, 0x6f, 0x6f, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0a, 0x6d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x44, 0x0a, 0x0d,
	0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x39, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x6d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x12, 0x44, 0x0a, 0x0d, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x5f, 0x66, 0x6c,
	0x6f, 0x61, 0x74, 0x18, 0x3a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x70, 0x62, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74,
	0x72, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x6d, 0x61, 0x70,
	0x53, 0x74, 0x72, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x47, 0x0a, 0x0e, 0x6d, 0x61, 0x70, 0x5f,
	0x73, 0x74, 0x72, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x3b, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0c, 0x6d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x44, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x12, 0x41, 0x0a, 0x0c, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x5f, 0x65, 0x6e, 0x75,
	0x6d, 0x18, 0x3c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x62,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x45,
	0x6e, 0x75, 0x6d, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x6d, 0x61, 0x70, 0x53, 0x74, 0x72,
	0x45, 0x6e, 0x75, 0x6d, 0x12, 0x3e, 0x0a, 0x0b, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x5f,
	0x6d, 0x73, 0x67, 0x18, 0x3d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x70, 0x62, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74,
	0x72, 0x4d, 0x73, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x6d, 0x61, 0x70, 0x53, 0x74,
	0x72, 0x4d, 0x73, 0x67, 0x12, 0x50, 0x0a, 0x11, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x3e, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x6d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x4d, 0x0a, 0x10, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74,
	0x72, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x3f, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x6d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0c, 0x69, 0x33, 0x32, 0x5f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x40, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x52, 0x0b, 0x69, 0x33, 0x32, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x26, 0x0a,
	0x0c, 0x69, 0x36, 0x34, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x41, 0x20,
	0x01, 0x28, 0x03, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0b, 0x69, 0x36, 0x34, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x26, 0x0a, 0x0c, 0x75, 0x33, 0x32, 0x5f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x42, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x52, 0x0b, 0x75, 0x33, 0x32, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x26, 0x0a,
	0x0c, 0x75, 0x36, 0x34, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x43, 0x20,
	0x01, 0x28, 0x04, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0b, 0x75, 0x36, 0x34, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x26, 0x0a, 0x0c, 0x73, 0x33, 0x32, 0x5f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x44, 0x20, 0x01, 0x28, 0x11, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x52, 0x0b, 0x73, 0x33, 0x32, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x26, 0x0a,
	0x0c, 0x73, 0x36, 0x34, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x45, 0x20,
	0x01, 0x28, 0x12, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0b, 0x73, 0x36, 0x34, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x26, 0x0a, 0x0c, 0x66, 0x33, 0x32, 0x5f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x46, 0x20, 0x01, 0x28, 0x07, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x52, 0x0b, 0x66, 0x33, 0x32, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x26, 0x0a,
	0x0c, 0x66, 0x36, 0x34, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x47, 0x20,
	0x01, 0x28, 0x06, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0b, 0x66, 0x36, 0x34, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x28, 0x0a, 0x0d, 0x73, 0x66, 0x33, 0x32, 0x5f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x48, 0x20, 0x01, 0x28, 0x0f, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x52, 0x0c, 0x73, 0x66, 0x33, 0x32, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12,
	0x28, 0x0a, 0x0d, 0x73, 0x66, 0x36, 0x34, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x18, 0x49, 0x20, 0x01, 0x28, 0x10, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0c, 0x73, 0x66, 0x36,
	0x34, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x28, 0x0a, 0x0d, 0x62, 0x6f, 0x6f,
	0x6c, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0c, 0x62, 0x6f, 0x6f, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x12, 0x26, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0b,
	0x73, 0x74, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x0e, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x4c, 0x20,
	0x01, 0x28, 0x0c, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x0e, 0x66, 0x6c, 0x6f, 0x61, 0x74,
	0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x02, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x52, 0x0d, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x12, 0x2c, 0x0a, 0x0f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x01, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x52, 0x0e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x12, 0x4e, 0x0a, 0x12, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x4f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x11,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x12, 0x4b, 0x0a, 0x11, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x50, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x10, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x45,
	0x0a, 0x0f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x18, 0x51, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x36, 0x0a, 0x0d, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x52, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52,
	0x0c, 0x65, 0x6e, 0x75, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x37, 0x0a,
	0x0c, 0x6d, 0x73, 0x67, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x53, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0b, 0x6d, 0x73, 0x67, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x1d, 0x0a, 0x09, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f,
	0x73, 0x74, 0x72, 0x18, 0x54, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x6f, 0x6e, 0x65,
	0x6f, 0x66, 0x53, 0x74, 0x72, 0x12, 0x1d, 0x0a, 0x09, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x69,
	0x33, 0x32, 0x18, 0x55, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x08, 0x6f, 0x6e, 0x65, 0x6f,
	0x66, 0x49, 0x33, 0x32, 0x12, 0x1d, 0x0a, 0x09, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x69, 0x36,
	0x34, 0x18, 0x56, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x08, 0x6f, 0x6e, 0x65, 0x6f, 0x66,
	0x49, 0x36, 0x34, 0x12, 0x1d, 0x0a, 0x09, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x75, 0x33, 0x32,
	0x18, 0x57, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x08, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x55,
	0x33, 0x32, 0x12, 0x1d, 0x0a, 0x09, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x75, 0x36, 0x34, 0x18,
	0x58, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x08, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x55, 0x36,
	0x34, 0x12, 0x1d, 0x0a, 0x09, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x73, 0x33, 0x32, 0x18, 0x59,
	0x20, 0x01, 0x28, 0x11, 0x48, 0x00, 0x52, 0x08, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x53, 0x33, 0x32,
	0x12, 0x1d, 0x0a, 0x09, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x73, 0x36, 0x34, 0x18, 0x5a, 0x20,
	0x01, 0x28, 0x12, 0x48, 0x00, 0x52, 0x08, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x53, 0x36, 0x34, 0x12,
	0x1d, 0x0a, 0x09, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x66, 0x33, 0x32, 0x18, 0x5b, 0x20, 0x01,
	0x28, 0x07, 0x48, 0x00, 0x52, 0x08, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x46, 0x33, 0x32, 0x12, 0x1d,
	0x0a, 0x09, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x66, 0x36, 0x34, 0x18, 0x5c, 0x20, 0x01, 0x28,
	0x06, 0x48, 0x00, 0x52, 0x08, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x46, 0x36, 0x34, 0x12, 0x1f, 0x0a,
	0x0a, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x73, 0x66, 0x33, 0x32, 0x18, 0x5d, 0x20, 0x01, 0x28,
	0x0f, 0x48, 0x00, 0x52, 0x09, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x53, 0x66, 0x33, 0x32, 0x12, 0x1f,
	0x0a, 0x0a, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x73, 0x66, 0x36, 0x34, 0x18, 0x5e, 0x20, 0x01,
	0x28, 0x10, 0x48, 0x00, 0x52, 0x09, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x53, 0x66, 0x36, 0x34, 0x12,
	0x1f, 0x0a, 0x0a, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x5f, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x09, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x42, 0x6f, 0x6f, 0x6c,
	0x12, 0x21, 0x0a, 0x0b, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18,
	0x60, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0a, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0b, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x66, 0x6c, 0x6f,
	0x61, 0x74, 0x18, 0x61, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x0a, 0x6f, 0x6e, 0x65, 0x6f,
	0x66, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x23, 0x0a, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f,
	0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x62, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x0b,
	0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x45, 0x0a, 0x0f, 0x6f,
	0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x63,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x48, 0x00, 0x52, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x42, 0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x12, 0x2d, 0x0a, 0x0a, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x65, 0x6e,
	0x75, 0x6d, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70,
	0x62, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x09, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x45,
	0x6e, 0x75, 0x6d, 0x12, 0x2e, 0x0a, 0x09, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x6d, 0x73, 0x67,
	0x18, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x62, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x08, 0x6f, 0x6e, 0x65, 0x6f, 0x66,
	0x4d, 0x73, 0x67, 0x12, 0x29, 0x0a, 0x0e, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x6f, 0x6e, 0x6c,
	0x79, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x68, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x04,
	0x52, 0x0c, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x53, 0x74, 0x72, 0x12, 0x10,
	0x0a, 0x03, 0x41, 0x4e, 0x44, 0x18, 0x69, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x41, 0x4e, 0x44,
	0x12, 0x21, 0x0a, 0x03, 0x4e, 0x4f, 0x54, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x03,
	0x4e, 0x4f, 0x54, 0x12, 0x0e, 0x0a, 0x02, 0x4f, 0x52, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x4f, 0x52, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x4e, 0x18, 0x6c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x49, 0x4e, 0x12, 0x27, 0x0a, 0x0d, 0x6e, 0x6f, 0x6e, 0x5f, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x5f, 0x73, 0x74, 0x72, 0x18, 0x6d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x07, 0x52,
	0x0b, 0x6e, 0x6f, 0x6e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x53, 0x74, 0x72, 0x12, 0x27, 0x0a, 0x0d,
	0x6e, 0x6f, 0x6e, 0x5f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x5f, 0x69, 0x33, 0x32, 0x18, 0x6e, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x07, 0x52, 0x0b, 0x6e, 0x6f, 0x6e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x49, 0x33, 0x32, 0x12, 0x27, 0x0a, 0x0d, 0x6e, 0x6f, 0x6e, 0x5f, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x5f, 0x69, 0x36, 0x34, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x03, 0x42, 0x03, 0xe0, 0x41,
	0x07, 0x52, 0x0b, 0x6e, 0x6f, 0x6e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x49, 0x36, 0x34, 0x12, 0x27,
	0x0a, 0x0d, 0x6e, 0x6f, 0x6e, 0x5f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x5f, 0x75, 0x33, 0x32, 0x18,
	0x70, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x03, 0xe0, 0x41, 0x07, 0x52, 0x0b, 0x6e, 0x6f, 0x6e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x55, 0x33, 0x32, 0x12, 0x27, 0x0a, 0x0d, 0x6e, 0x6f, 0x6e, 0x5f, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x5f, 0x75, 0x36, 0x34, 0x18, 0x71, 0x20, 0x01, 0x28, 0x04, 0x42, 0x03,
	0xe0, 0x41, 0x07, 0x52, 0x0b, 0x6e, 0x6f, 0x6e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x55, 0x36, 0x34,
	0x12, 0x27, 0x0a, 0x0d, 0x6e, 0x6f, 0x6e, 0x5f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x5f, 0x73, 0x33,
	0x32, 0x18, 0x72, 0x20, 0x01, 0x28, 0x11, 0x42, 0x03, 0xe0, 0x41, 0x07, 0x52, 0x0b, 0x6e, 0x6f,
	0x6e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x53, 0x33, 0x32, 0x12, 0x27, 0x0a, 0x0d, 0x6e, 0x6f, 0x6e,
	0x5f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x5f, 0x73, 0x36, 0x34, 0x18, 0x73, 0x20, 0x01, 0x28, 0x12,
	0x42, 0x03, 0xe0, 0x41, 0x07, 0x52, 0x0b, 0x6e, 0x6f, 0x6e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x53,
	0x36, 0x34, 0x12, 0x27, 0x0a, 0x0d, 0x6e, 0x6f, 0x6e, 0x5f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x5f,
	0x66, 0x33, 0x32, 0x18, 0x74, 0x20, 0x01, 0x28, 0x07, 0x42, 0x03, 0xe0, 0x41, 0x07, 0x52, 0x0b,
	0x6e, 0x6f, 0x6e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x46, 0x33, 0x32, 0x12, 0x27, 0x0a, 0x0d, 0x6e,
	0x6f, 0x6e, 0x5f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x5f, 0x66, 0x36, 0x34, 0x18, 0x75, 0x20, 0x01,
	0x28, 0x06, 0x42, 0x03, 0xe0, 0x41, 0x07, 0x52, 0x0b, 0x6e, 0x6f, 0x6e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x46, 0x36, 0x34, 0x12, 0x29, 0x0a, 0x0e, 0x6e, 0x6f, 0x6e, 0x5f, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x5f, 0x73, 0x66, 0x33, 0x32, 0x18, 0x76, 0x20, 0x01, 0x28, 0x0f, 0x42, 0x03, 0xe0, 0x41,
	0x07, 0x52, 0x0c, 0x6e, 0x6f, 0x6e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x53, 0x66, 0x33, 0x32, 0x12,
	0x29, 0x0a, 0x0e, 0x6e, 0x6f, 0x6e, 0x5f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x5f, 0x73, 0x66, 0x36,
	0x34, 0x18, 0x77, 0x20, 0x01, 0x28, 0x10, 0x42, 0x03, 0xe0, 0x41, 0x07, 0x52, 0x0c, 0x6e, 0x6f,
	0x6e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x53, 0x66, 0x36, 0x34, 0x12, 0x29, 0x0a, 0x0e, 0x6e, 0x6f,
	0x6e, 0x5f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x78, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x07, 0x52, 0x0c, 0x6e, 0x6f, 0x6e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x2b, 0x0a, 0x0f, 0x6e, 0x6f, 0x6e, 0x5f, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x79, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x03,
	0xe0, 0x41, 0x07, 0x52, 0x0d, 0x6e, 0x6f, 0x6e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x12, 0x2b, 0x0a, 0x0f, 0x6e, 0x6f, 0x6e, 0x5f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x5f,
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x7a, 0x20, 0x01, 0x28, 0x02, 0x42, 0x03, 0xe0, 0x41, 0x07,
	0x52, 0x0d, 0x6e, 0x6f, 0x6e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12,
	0x2d, 0x0a, 0x10, 0x6e, 0x6f, 0x6e, 0x5f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x5f, 0x64, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x18, 0x7b, 0x20, 0x01, 0x28, 0x01, 0x42, 0x03, 0xe0, 0x41, 0x07, 0x52, 0x0e,
	0x6e, 0x6f, 0x6e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x4f,
	0x0a, 0x13, 0x6e, 0x6f, 0x6e, 0x5f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x7c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x07, 0x52, 0x11, 0x6e, 0x6f,
	0x6e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x4c, 0x0a, 0x12, 0x6e, 0x6f, 0x6e, 0x5f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x5f, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x7d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x03, 0xe0, 0x41, 0x07, 0x52, 0x10, 0x6e, 0x6f, 0x6e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a,
	0x10, 0x6e, 0x6f, 0x6e, 0x5f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x5f, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x18, 0x7e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x42, 0x03, 0xe0, 0x41, 0x07, 0x52, 0x0e, 0x6e, 0x6f, 0x6e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x37, 0x0a, 0x0e, 0x6e, 0x6f, 0x6e, 0x5f, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0x7f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x42, 0x03, 0xe0, 0x41, 0x07,
	0x52, 0x0c, 0x6e, 0x6f, 0x6e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x24,
	0x0a, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x80, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x05, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x0b, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x33, 0x32, 0x5f,
	0x73, 0x74, 0x72, 0x18, 0x81, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x49,
	0x33, 0x32, 0x53, 0x74, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x6d, 0x61, 0x70, 0x49,
	0x33, 0x32, 0x53, 0x74, 0x72, 0x12, 0x45, 0x0a, 0x13, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x6e,
	0x6f, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x18, 0x82, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x42, 0x05, 0xa8, 0xec, 0xd7, 0x4d, 0x04, 0x52, 0x11, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x4e, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x12, 0x23, 0x0a, 0x09,
	0x6e, 0x6f, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x83, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x05, 0xa8, 0xec, 0xd7, 0x4d, 0x03, 0x52, 0x08, 0x6e, 0x6f, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x1a, 0x3c, 0x0a, 0x0e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x53, 0x74, 0x72, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x3c, 0x0a, 0x0e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x49, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3c, 0x0a,
	0x0e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x49, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3c, 0x0a, 0x0e, 0x4d,
	0x61, 0x70, 0x53, 0x74, 0x72, 0x55, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3c, 0x0a, 0x0e, 0x4d, 0x61, 0x70,
	0x53, 0x74, 0x72, 0x55, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3c, 0x0a, 0x0e, 0x4d, 0x61, 0x70, 0x53, 0x74,
	0x72, 0x53, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x11, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3c, 0x0a, 0x0e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x53,
	0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x12, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x3c, 0x0a, 0x0e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x46, 0x33, 0x32,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x3c, 0x0a, 0x0e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x46, 0x36, 0x34, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x06, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x3d, 0x0a, 0x0f, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x53, 0x66, 0x33, 0x32, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3d,
	0x0a, 0x0f, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x53, 0x66, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x10, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3d, 0x0a,
	0x0f, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x42, 0x6f, 0x6f, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10,
	0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x42, 0x79, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10,
	0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3f, 0x0a, 0x11,
	0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4b, 0x0a,
	0x0f, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x45, 0x6e, 0x75, 0x6d, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x22, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0c, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4d, 0x0a, 0x0e, 0x4d, 0x61,
	0x70, 0x53, 0x74, 0x72, 0x4d, 0x73, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x25,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5e, 0x0a, 0x14, 0x4d, 0x61, 0x70,
	0x53, 0x74, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5c, 0x0a, 0x13, 0x4d, 0x61, 0x70,
	0x53, 0x74, 0x72, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3c, 0x0a, 0x0e, 0x4d, 0x61, 0x70, 0x49, 0x33,
	0x32, 0x53, 0x74, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x22, 0x23,
	0x0a, 0x05, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x01, 0x79, 0x2a, 0x30, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0b, 0x0a, 0x07, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4f, 0x4e, 0x45, 0x10,
	0x01, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x57, 0x4f, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x48,
	0x52, 0x45, 0x45, 0x10, 0x03, 0x42, 0x86, 0x01, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x70, 0x62, 0x42, 0x0c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x50, 0x01, 0x5a, 0x32, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x79, 0x2d, 0x61, 0x69, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x70, 0x62, 0xa2, 0x02, 0x03, 0x54, 0x58, 0x58, 0xaa, 0x02,
	0x06, 0x54, 0x65, 0x73, 0x74, 0x70, 0x62, 0xca, 0x02, 0x06, 0x54, 0x65, 0x73, 0x74, 0x70, 0x62,
	0xe2, 0x02, 0x12, 0x54, 0x65, 0x73, 0x74, 0x70, 0x62, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x06, 0x54, 0x65, 0x73, 0x74, 0x70, 0x62, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_internal_testpb_message_proto_rawDescOnce sync.Once
	file_internal_testpb_message_proto_rawDescData = file_internal_testpb_message_proto_rawDesc
)

func file_internal_testpb_message_proto_rawDescGZIP() []byte {
	file_internal_testpb_message_proto_rawDescOnce.Do(func() {
		file_internal_testpb_message_proto_rawDescData = protoimpl.X.CompressGZIP(file_internal_testpb_message_proto_rawDescData)
	})
	return file_internal_testpb_message_proto_rawDescData
}

var file_internal_testpb_message_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_internal_testpb_message_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_internal_testpb_message_proto_goTypes = []interface{}{
	(Enum)(0),                     // 0: testpb.Enum
	(*Message)(nil),               // 1: testpb.Message
	(*Point)(nil),                 // 2: testpb.Point
	nil,                           // 3: testpb.Message.MapStrStrEntry
	nil,                           // 4: testpb.Message.MapStrI32Entry
	nil,                           // 5: testpb.Message.MapStrI64Entry
	nil,                           // 6: testpb.Message.MapStrU32Entry
	nil,                           // 7: testpb.Message.MapStrU64Entry
	nil,                           // 8: testpb.Message.MapStrS32Entry
	nil,                           // 9: testpb.Message.MapStrS64Entry
	nil,                           // 10: testpb.Message.MapStrF32Entry
	nil,                           // 11: testpb.Message.MapStrF64Entry
	nil,                           // 12: testpb.Message.MapStrSf32Entry
	nil,                           // 13: testpb.Message.MapStrSf64Entry
	nil,                           // 14: testpb.Message.MapStrBoolEntry
	nil,                           // 15: testpb.Message.MapStrBytesEntry
	nil,                           // 16: testpb.Message.MapStrFloatEntry
	nil,                           // 17: testpb.Message.MapStrDoubleEntry
	nil,                           // 18: testpb.Message.MapStrEnumEntry
	nil,                           // 19: testpb.Message.MapStrMsgEntry
	nil,                           // 20: testpb.Message.MapStrTimestampEntry
	nil,                           // 21: testpb.Message.MapStrDurationEntry
	nil,                           // 22: testpb.Message.MapI32StrEntry
	(*timestamppb.Timestamp)(nil), // 23: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),   // 24: google.protobuf.Duration
	(*structpb.Struct)(nil),       // 25: google.protobuf.Struct
}
var file_internal_testpb_message_proto_depIdxs = []int32{
	23, // 0: testpb.Message.timestamp:type_name -> google.protobuf.Timestamp
	24, // 1: testpb.Message.duration:type_name -> google.protobuf.Duration
	25, // 2: testpb.Message.struct:type_name -> google.protobuf.Struct
	23, // 3: testpb.Message.rp_timestamp:type_name -> google.protobuf.Timestamp
	24, // 4: testpb.Message.rp_duration:type_name -> google.protobuf.Duration
	25, // 5: testpb.Message.rp_struct:type_name -> google.protobuf.Struct
	0,  // 6: testpb.Message.enum:type_name -> testpb.Enum
	0,  // 7: testpb.Message.rp_enum:type_name -> testpb.Enum
	1,  // 8: testpb.Message.sub:type_name -> testpb.Message
	1,  // 9: testpb.Message.rp_sub:type_name -> testpb.Message
	1,  // 10: testpb.Message.no_filter_msg:type_name -> testpb.Message
	3,  // 11: testpb.Message.map_str_str:type_name -> testpb.Message.MapStrStrEntry
	4,  // 12: testpb.Message.map_str_i32:type_name -> testpb.Message.MapStrI32Entry
	5,  // 13: testpb.Message.map_str_i64:type_name -> testpb.Message.MapStrI64Entry
	6,  // 14: testpb.Message.map_str_u32:type_name -> testpb.Message.MapStrU32Entry
	7,  // 15: testpb.Message.map_str_u64:type_name -> testpb.Message.MapStrU64Entry
	8,  // 16: testpb.Message.map_str_s32:type_name -> testpb.Message.MapStrS32Entry
	9,  // 17: testpb.Message.map_str_s64:type_name -> testpb.Message.MapStrS64Entry
	10, // 18: testpb.Message.map_str_f32:type_name -> testpb.Message.MapStrF32Entry
	11, // 19: testpb.Message.map_str_f64:type_name -> testpb.Message.MapStrF64Entry
	12, // 20: testpb.Message.map_str_sf32:type_name -> testpb.Message.MapStrSf32Entry
	13, // 21: testpb.Message.map_str_sf64:type_name -> testpb.Message.MapStrSf64Entry
	14, // 22: testpb.Message.map_str_bool:type_name -> testpb.Message.MapStrBoolEntry
	15, // 23: testpb.Message.map_str_bytes:type_name -> testpb.Message.MapStrBytesEntry
	16, // 24: testpb.Message.map_str_float:type_name -> testpb.Message.MapStrFloatEntry
	17, // 25: testpb.Message.map_str_double:type_name -> testpb.Message.MapStrDoubleEntry
	18, // 26: testpb.Message.map_str_enum:type_name -> testpb.Message.MapStrEnumEntry
	19, // 27: testpb.Message.map_str_msg:type_name -> testpb.Message.MapStrMsgEntry
	20, // 28: testpb.Message.map_str_timestamp:type_name -> testpb.Message.MapStrTimestampEntry
	21, // 29: testpb.Message.map_str_duration:type_name -> testpb.Message.MapStrDurationEntry
	23, // 30: testpb.Message.timestamp_optional:type_name -> google.protobuf.Timestamp
	24, // 31: testpb.Message.duration_optional:type_name -> google.protobuf.Duration
	25, // 32: testpb.Message.struct_optional:type_name -> google.protobuf.Struct
	0,  // 33: testpb.Message.enum_optional:type_name -> testpb.Enum
	1,  // 34: testpb.Message.msg_optional:type_name -> testpb.Message
	23, // 35: testpb.Message.oneof_timestamp:type_name -> google.protobuf.Timestamp
	24, // 36: testpb.Message.oneof_duration:type_name -> google.protobuf.Duration
	25, // 37: testpb.Message.oneof_struct:type_name -> google.protobuf.Struct
	0,  // 38: testpb.Message.oneof_enum:type_name -> testpb.Enum
	1,  // 39: testpb.Message.oneof_msg:type_name -> testpb.Message
	1,  // 40: testpb.Message.NOT:type_name -> testpb.Message
	23, // 41: testpb.Message.non_empty_timestamp:type_name -> google.protobuf.Timestamp
	24, // 42: testpb.Message.non_empty_duration:type_name -> google.protobuf.Duration
	25, // 43: testpb.Message.non_empty_struct:type_name -> google.protobuf.Struct
	0,  // 44: testpb.Message.non_empty_enum:type_name -> testpb.Enum
	2,  // 45: testpb.Message.point:type_name -> testpb.Point
	22, // 46: testpb.Message.map_i32_str:type_name -> testpb.Message.MapI32StrEntry
	2,  // 47: testpb.Message.point_non_traversal:type_name -> testpb.Point
	0,  // 48: testpb.Message.MapStrEnumEntry.value:type_name -> testpb.Enum
	1,  // 49: testpb.Message.MapStrMsgEntry.value:type_name -> testpb.Message
	23, // 50: testpb.Message.MapStrTimestampEntry.value:type_name -> google.protobuf.Timestamp
	24, // 51: testpb.Message.MapStrDurationEntry.value:type_name -> google.protobuf.Duration
	52, // [52:52] is the sub-list for method output_type
	52, // [52:52] is the sub-list for method input_type
	52, // [52:52] is the sub-list for extension type_name
	52, // [52:52] is the sub-list for extension extendee
	0,  // [0:52] is the sub-list for field type_name
}

func init() { file_internal_testpb_message_proto_init() }
func file_internal_testpb_message_proto_init() {
	if File_internal_testpb_message_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_internal_testpb_message_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_testpb_message_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Point); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_internal_testpb_message_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Message_OneofStr)(nil),
		(*Message_OneofI32)(nil),
		(*Message_OneofI64)(nil),
		(*Message_OneofU32)(nil),
		(*Message_OneofU64)(nil),
		(*Message_OneofS32)(nil),
		(*Message_OneofS64)(nil),
		(*Message_OneofF32)(nil),
		(*Message_OneofF64)(nil),
		(*Message_OneofSf32)(nil),
		(*Message_OneofSf64)(nil),
		(*Message_OneofBool)(nil),
		(*Message_OneofBytes)(nil),
		(*Message_OneofFloat)(nil),
		(*Message_OneofDouble)(nil),
		(*Message_OneofTimestamp)(nil),
		(*Message_OneofDuration)(nil),
		(*Message_OneofStruct)(nil),
		(*Message_OneofEnum)(nil),
		(*Message_OneofMsg)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_internal_testpb_message_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_internal_testpb_message_proto_goTypes,
		DependencyIndexes: file_internal_testpb_message_proto_depIdxs,
		EnumInfos:         file_internal_testpb_message_proto_enumTypes,
		MessageInfos:      file_internal_testpb_message_proto_msgTypes,
	}.Build()
	File_internal_testpb_message_proto = out.File
	file_internal_testpb_message_proto_rawDesc = nil
	file_internal_testpb_message_proto_goTypes = nil
	file_internal_testpb_message_proto_depIdxs = nil
}
