// Copyright 2023 The Blocky Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: internal/testpb/message.proto

package testpb

import (
	_ "github.com/blockysource/go-genproto/blocky/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Enum int32

const (
	Enum_UNKNOWN Enum = 0
	Enum_ONE     Enum = 1
	Enum_TWO     Enum = 2
	Enum_THREE   Enum = 3
)

// Enum value maps for Enum.
var (
	Enum_name = map[int32]string{
		0: "UNKNOWN",
		1: "ONE",
		2: "TWO",
		3: "THREE",
	}
	Enum_value = map[string]int32{
		"UNKNOWN": 0,
		"ONE":     1,
		"TWO":     2,
		"THREE":   3,
	}
)

func (x Enum) Enum() *Enum {
	p := new(Enum)
	*p = x
	return p
}

func (x Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_internal_testpb_message_proto_enumTypes[0].Descriptor()
}

func (Enum) Type() protoreflect.EnumType {
	return &file_internal_testpb_message_proto_enumTypes[0]
}

func (x Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Enum.Descriptor instead.
func (Enum) EnumDescriptor() ([]byte, []int) {
	return file_internal_testpb_message_proto_rawDescGZIP(), []int{0}
}

type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string                            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Str             string                            `protobuf:"bytes,2,opt,name=str,proto3" json:"str,omitempty"`
	I32             int32                             `protobuf:"varint,3,opt,name=i32,proto3" json:"i32,omitempty"`
	I64             int64                             `protobuf:"varint,4,opt,name=i64,proto3" json:"i64,omitempty"`
	U32             uint32                            `protobuf:"varint,5,opt,name=u32,proto3" json:"u32,omitempty"`
	U64             uint64                            `protobuf:"varint,6,opt,name=u64,proto3" json:"u64,omitempty"`
	S32             int32                             `protobuf:"zigzag32,7,opt,name=s32,proto3" json:"s32,omitempty"`
	S64             int64                             `protobuf:"zigzag64,8,opt,name=s64,proto3" json:"s64,omitempty"`
	F32             uint32                            `protobuf:"fixed32,9,opt,name=f32,proto3" json:"f32,omitempty"`
	F64             uint64                            `protobuf:"fixed64,10,opt,name=f64,proto3" json:"f64,omitempty"`
	Sf32            int32                             `protobuf:"fixed32,11,opt,name=sf32,proto3" json:"sf32,omitempty"`
	Sf64            int64                             `protobuf:"fixed64,12,opt,name=sf64,proto3" json:"sf64,omitempty"`
	Bool            bool                              `protobuf:"varint,13,opt,name=bool,proto3" json:"bool,omitempty"`
	Bytes           []byte                            `protobuf:"bytes,14,opt,name=bytes,proto3" json:"bytes,omitempty"`
	Float           float32                           `protobuf:"fixed32,15,opt,name=float,proto3" json:"float,omitempty"`
	Double          float64                           `protobuf:"fixed64,16,opt,name=double,proto3" json:"double,omitempty"`
	RpStr           []string                          `protobuf:"bytes,17,rep,name=rp_str,json=rpStr,proto3" json:"rp_str,omitempty"`
	RpI32           []int32                           `protobuf:"varint,18,rep,packed,name=rp_i32,json=rpI32,proto3" json:"rp_i32,omitempty"`
	RpI64           []int64                           `protobuf:"varint,19,rep,packed,name=rp_i64,json=rpI64,proto3" json:"rp_i64,omitempty"`
	RpU32           []uint32                          `protobuf:"varint,20,rep,packed,name=rp_u32,json=rpU32,proto3" json:"rp_u32,omitempty"`
	RpU64           []uint64                          `protobuf:"varint,21,rep,packed,name=rp_u64,json=rpU64,proto3" json:"rp_u64,omitempty"`
	RpS32           []int32                           `protobuf:"zigzag32,22,rep,packed,name=rp_s32,json=rpS32,proto3" json:"rp_s32,omitempty"`
	RpS64           []int64                           `protobuf:"zigzag64,23,rep,packed,name=rp_s64,json=rpS64,proto3" json:"rp_s64,omitempty"`
	RpF32           []uint32                          `protobuf:"fixed32,24,rep,packed,name=rp_f32,json=rpF32,proto3" json:"rp_f32,omitempty"`
	RpF64           []uint64                          `protobuf:"fixed64,25,rep,packed,name=rp_f64,json=rpF64,proto3" json:"rp_f64,omitempty"`
	RpSf32          []int32                           `protobuf:"fixed32,26,rep,packed,name=rp_sf32,json=rpSf32,proto3" json:"rp_sf32,omitempty"`
	RpSf64          []int64                           `protobuf:"fixed64,27,rep,packed,name=rp_sf64,json=rpSf64,proto3" json:"rp_sf64,omitempty"`
	RpBool          []bool                            `protobuf:"varint,28,rep,packed,name=rp_bool,json=rpBool,proto3" json:"rp_bool,omitempty"`
	RpBytes         [][]byte                          `protobuf:"bytes,29,rep,name=rp_bytes,json=rpBytes,proto3" json:"rp_bytes,omitempty"`
	RpFloat         []float32                         `protobuf:"fixed32,30,rep,packed,name=rp_float,json=rpFloat,proto3" json:"rp_float,omitempty"`
	RpDouble        []float64                         `protobuf:"fixed64,31,rep,packed,name=rp_double,json=rpDouble,proto3" json:"rp_double,omitempty"`
	Timestamp       *timestamppb.Timestamp            `protobuf:"bytes,32,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Duration        *durationpb.Duration              `protobuf:"bytes,33,opt,name=duration,proto3" json:"duration,omitempty"`
	Struct          *structpb.Struct                  `protobuf:"bytes,34,opt,name=struct,proto3" json:"struct,omitempty"`
	RpTimestamp     []*timestamppb.Timestamp          `protobuf:"bytes,35,rep,name=rp_timestamp,json=rpTimestamp,proto3" json:"rp_timestamp,omitempty"`
	RpDuration      []*durationpb.Duration            `protobuf:"bytes,36,rep,name=rp_duration,json=rpDuration,proto3" json:"rp_duration,omitempty"`
	RpStruct        []*structpb.Struct                `protobuf:"bytes,37,rep,name=rp_struct,json=rpStruct,proto3" json:"rp_struct,omitempty"`
	Enum            Enum                              `protobuf:"varint,38,opt,name=enum,proto3,enum=testpb.Enum" json:"enum,omitempty"`
	RpEnum          []Enum                            `protobuf:"varint,39,rep,packed,name=rp_enum,json=rpEnum,proto3,enum=testpb.Enum" json:"rp_enum,omitempty"`
	Sub             *Message                          `protobuf:"bytes,40,opt,name=sub,proto3" json:"sub,omitempty"`
	RpSub           []*Message                        `protobuf:"bytes,41,rep,name=rp_sub,json=rpSub,proto3" json:"rp_sub,omitempty"`
	NoFilter        string                            `protobuf:"bytes,42,opt,name=no_filter,json=noFilter,proto3" json:"no_filter,omitempty"`
	NoFilterMsg     *Message                          `protobuf:"bytes,43,opt,name=no_filter_msg,json=noFilterMsg,proto3" json:"no_filter_msg,omitempty"`
	I32Complexity   int32                             `protobuf:"varint,44,opt,name=i32_complexity,json=i32Complexity,proto3" json:"i32_complexity,omitempty"`
	MapStrStr       map[string]string                 `protobuf:"bytes,45,rep,name=map_str_str,json=mapStrStr,proto3" json:"map_str_str,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapStrI32       map[string]int32                  `protobuf:"bytes,46,rep,name=map_str_i32,json=mapStrI32,proto3" json:"map_str_i32,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapStrI64       map[string]int64                  `protobuf:"bytes,47,rep,name=map_str_i64,json=mapStrI64,proto3" json:"map_str_i64,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapStrU32       map[string]uint32                 `protobuf:"bytes,48,rep,name=map_str_u32,json=mapStrU32,proto3" json:"map_str_u32,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapStrU64       map[string]uint64                 `protobuf:"bytes,49,rep,name=map_str_u64,json=mapStrU64,proto3" json:"map_str_u64,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapStrS32       map[string]int32                  `protobuf:"bytes,50,rep,name=map_str_s32,json=mapStrS32,proto3" json:"map_str_s32,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"zigzag32,2,opt,name=value,proto3"`
	MapStrS64       map[string]int64                  `protobuf:"bytes,51,rep,name=map_str_s64,json=mapStrS64,proto3" json:"map_str_s64,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"zigzag64,2,opt,name=value,proto3"`
	MapStrF32       map[string]uint32                 `protobuf:"bytes,52,rep,name=map_str_f32,json=mapStrF32,proto3" json:"map_str_f32,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	MapStrF64       map[string]uint64                 `protobuf:"bytes,53,rep,name=map_str_f64,json=mapStrF64,proto3" json:"map_str_f64,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	MapStrSf32      map[string]int32                  `protobuf:"bytes,54,rep,name=map_str_sf32,json=mapStrSf32,proto3" json:"map_str_sf32,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	MapStrSf64      map[string]int64                  `protobuf:"bytes,55,rep,name=map_str_sf64,json=mapStrSf64,proto3" json:"map_str_sf64,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	MapStrBool      map[string]bool                   `protobuf:"bytes,56,rep,name=map_str_bool,json=mapStrBool,proto3" json:"map_str_bool,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapStrBytes     map[string][]byte                 `protobuf:"bytes,57,rep,name=map_str_bytes,json=mapStrBytes,proto3" json:"map_str_bytes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapStrFloat     map[string]float32                `protobuf:"bytes,58,rep,name=map_str_float,json=mapStrFloat,proto3" json:"map_str_float,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	MapStrDouble    map[string]float64                `protobuf:"bytes,59,rep,name=map_str_double,json=mapStrDouble,proto3" json:"map_str_double,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	MapStrEnum      map[string]Enum                   `protobuf:"bytes,60,rep,name=map_str_enum,json=mapStrEnum,proto3" json:"map_str_enum,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=testpb.Enum"`
	MapStrMsg       map[string]*Message               `protobuf:"bytes,61,rep,name=map_str_msg,json=mapStrMsg,proto3" json:"map_str_msg,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapStrTimestamp map[string]*timestamppb.Timestamp `protobuf:"bytes,62,rep,name=map_str_timestamp,json=mapStrTimestamp,proto3" json:"map_str_timestamp,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapStrDuration  map[string]*durationpb.Duration   `protobuf:"bytes,63,rep,name=map_str_duration,json=mapStrDuration,proto3" json:"map_str_duration,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	I32Null         int32                             `protobuf:"varint,64,opt,name=i32_null,json=i32Null,proto3" json:"i32_null,omitempty"`
	I64Null         int64                             `protobuf:"varint,65,opt,name=i64_null,json=i64Null,proto3" json:"i64_null,omitempty"`
	U32Null         uint32                            `protobuf:"varint,66,opt,name=u32_null,json=u32Null,proto3" json:"u32_null,omitempty"`
	U64Null         uint64                            `protobuf:"varint,67,opt,name=u64_null,json=u64Null,proto3" json:"u64_null,omitempty"`
	S32Null         int32                             `protobuf:"zigzag32,68,opt,name=s32_null,json=s32Null,proto3" json:"s32_null,omitempty"`
	S64Null         int64                             `protobuf:"zigzag64,69,opt,name=s64_null,json=s64Null,proto3" json:"s64_null,omitempty"`
	F32Null         uint32                            `protobuf:"fixed32,70,opt,name=f32_null,json=f32Null,proto3" json:"f32_null,omitempty"`
	F64Null         uint64                            `protobuf:"fixed64,71,opt,name=f64_null,json=f64Null,proto3" json:"f64_null,omitempty"`
	Sf32Null        int32                             `protobuf:"fixed32,72,opt,name=sf32_null,json=sf32Null,proto3" json:"sf32_null,omitempty"`
	Sf64Null        int64                             `protobuf:"fixed64,73,opt,name=sf64_null,json=sf64Null,proto3" json:"sf64_null,omitempty"`
	BoolNull        bool                              `protobuf:"varint,74,opt,name=bool_null,json=boolNull,proto3" json:"bool_null,omitempty"`
	StrNull         string                            `protobuf:"bytes,75,opt,name=str_null,json=strNull,proto3" json:"str_null,omitempty"`
	BytesNull       []byte                            `protobuf:"bytes,76,opt,name=bytes_null,json=bytesNull,proto3" json:"bytes_null,omitempty"`
	FloatNull       float32                           `protobuf:"fixed32,77,opt,name=float_null,json=floatNull,proto3" json:"float_null,omitempty"`
	DoubleNull      float64                           `protobuf:"fixed64,78,opt,name=double_null,json=doubleNull,proto3" json:"double_null,omitempty"`
	TimestampNull   *timestamppb.Timestamp            `protobuf:"bytes,79,opt,name=timestamp_null,json=timestampNull,proto3" json:"timestamp_null,omitempty"`
	DurationNull    *durationpb.Duration              `protobuf:"bytes,80,opt,name=duration_null,json=durationNull,proto3" json:"duration_null,omitempty"`
	StructNull      *structpb.Struct                  `protobuf:"bytes,81,opt,name=struct_null,json=structNull,proto3" json:"struct_null,omitempty"`
	EnumNull        Enum                              `protobuf:"varint,82,opt,name=enum_null,json=enumNull,proto3,enum=testpb.Enum" json:"enum_null,omitempty"`
	MsgNull         *Message                          `protobuf:"bytes,83,opt,name=msg_null,json=msgNull,proto3" json:"msg_null,omitempty"`
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_testpb_message_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_internal_testpb_message_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_internal_testpb_message_proto_rawDescGZIP(), []int{0}
}

func (x *Message) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Message) GetStr() string {
	if x != nil {
		return x.Str
	}
	return ""
}

func (x *Message) GetI32() int32 {
	if x != nil {
		return x.I32
	}
	return 0
}

func (x *Message) GetI64() int64 {
	if x != nil {
		return x.I64
	}
	return 0
}

func (x *Message) GetU32() uint32 {
	if x != nil {
		return x.U32
	}
	return 0
}

func (x *Message) GetU64() uint64 {
	if x != nil {
		return x.U64
	}
	return 0
}

func (x *Message) GetS32() int32 {
	if x != nil {
		return x.S32
	}
	return 0
}

func (x *Message) GetS64() int64 {
	if x != nil {
		return x.S64
	}
	return 0
}

func (x *Message) GetF32() uint32 {
	if x != nil {
		return x.F32
	}
	return 0
}

func (x *Message) GetF64() uint64 {
	if x != nil {
		return x.F64
	}
	return 0
}

func (x *Message) GetSf32() int32 {
	if x != nil {
		return x.Sf32
	}
	return 0
}

func (x *Message) GetSf64() int64 {
	if x != nil {
		return x.Sf64
	}
	return 0
}

func (x *Message) GetBool() bool {
	if x != nil {
		return x.Bool
	}
	return false
}

func (x *Message) GetBytes() []byte {
	if x != nil {
		return x.Bytes
	}
	return nil
}

func (x *Message) GetFloat() float32 {
	if x != nil {
		return x.Float
	}
	return 0
}

func (x *Message) GetDouble() float64 {
	if x != nil {
		return x.Double
	}
	return 0
}

func (x *Message) GetRpStr() []string {
	if x != nil {
		return x.RpStr
	}
	return nil
}

func (x *Message) GetRpI32() []int32 {
	if x != nil {
		return x.RpI32
	}
	return nil
}

func (x *Message) GetRpI64() []int64 {
	if x != nil {
		return x.RpI64
	}
	return nil
}

func (x *Message) GetRpU32() []uint32 {
	if x != nil {
		return x.RpU32
	}
	return nil
}

func (x *Message) GetRpU64() []uint64 {
	if x != nil {
		return x.RpU64
	}
	return nil
}

func (x *Message) GetRpS32() []int32 {
	if x != nil {
		return x.RpS32
	}
	return nil
}

func (x *Message) GetRpS64() []int64 {
	if x != nil {
		return x.RpS64
	}
	return nil
}

func (x *Message) GetRpF32() []uint32 {
	if x != nil {
		return x.RpF32
	}
	return nil
}

func (x *Message) GetRpF64() []uint64 {
	if x != nil {
		return x.RpF64
	}
	return nil
}

func (x *Message) GetRpSf32() []int32 {
	if x != nil {
		return x.RpSf32
	}
	return nil
}

func (x *Message) GetRpSf64() []int64 {
	if x != nil {
		return x.RpSf64
	}
	return nil
}

func (x *Message) GetRpBool() []bool {
	if x != nil {
		return x.RpBool
	}
	return nil
}

func (x *Message) GetRpBytes() [][]byte {
	if x != nil {
		return x.RpBytes
	}
	return nil
}

func (x *Message) GetRpFloat() []float32 {
	if x != nil {
		return x.RpFloat
	}
	return nil
}

func (x *Message) GetRpDouble() []float64 {
	if x != nil {
		return x.RpDouble
	}
	return nil
}

func (x *Message) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *Message) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *Message) GetStruct() *structpb.Struct {
	if x != nil {
		return x.Struct
	}
	return nil
}

func (x *Message) GetRpTimestamp() []*timestamppb.Timestamp {
	if x != nil {
		return x.RpTimestamp
	}
	return nil
}

func (x *Message) GetRpDuration() []*durationpb.Duration {
	if x != nil {
		return x.RpDuration
	}
	return nil
}

func (x *Message) GetRpStruct() []*structpb.Struct {
	if x != nil {
		return x.RpStruct
	}
	return nil
}

func (x *Message) GetEnum() Enum {
	if x != nil {
		return x.Enum
	}
	return Enum_UNKNOWN
}

func (x *Message) GetRpEnum() []Enum {
	if x != nil {
		return x.RpEnum
	}
	return nil
}

func (x *Message) GetSub() *Message {
	if x != nil {
		return x.Sub
	}
	return nil
}

func (x *Message) GetRpSub() []*Message {
	if x != nil {
		return x.RpSub
	}
	return nil
}

func (x *Message) GetNoFilter() string {
	if x != nil {
		return x.NoFilter
	}
	return ""
}

func (x *Message) GetNoFilterMsg() *Message {
	if x != nil {
		return x.NoFilterMsg
	}
	return nil
}

func (x *Message) GetI32Complexity() int32 {
	if x != nil {
		return x.I32Complexity
	}
	return 0
}

func (x *Message) GetMapStrStr() map[string]string {
	if x != nil {
		return x.MapStrStr
	}
	return nil
}

func (x *Message) GetMapStrI32() map[string]int32 {
	if x != nil {
		return x.MapStrI32
	}
	return nil
}

func (x *Message) GetMapStrI64() map[string]int64 {
	if x != nil {
		return x.MapStrI64
	}
	return nil
}

func (x *Message) GetMapStrU32() map[string]uint32 {
	if x != nil {
		return x.MapStrU32
	}
	return nil
}

func (x *Message) GetMapStrU64() map[string]uint64 {
	if x != nil {
		return x.MapStrU64
	}
	return nil
}

func (x *Message) GetMapStrS32() map[string]int32 {
	if x != nil {
		return x.MapStrS32
	}
	return nil
}

func (x *Message) GetMapStrS64() map[string]int64 {
	if x != nil {
		return x.MapStrS64
	}
	return nil
}

func (x *Message) GetMapStrF32() map[string]uint32 {
	if x != nil {
		return x.MapStrF32
	}
	return nil
}

func (x *Message) GetMapStrF64() map[string]uint64 {
	if x != nil {
		return x.MapStrF64
	}
	return nil
}

func (x *Message) GetMapStrSf32() map[string]int32 {
	if x != nil {
		return x.MapStrSf32
	}
	return nil
}

func (x *Message) GetMapStrSf64() map[string]int64 {
	if x != nil {
		return x.MapStrSf64
	}
	return nil
}

func (x *Message) GetMapStrBool() map[string]bool {
	if x != nil {
		return x.MapStrBool
	}
	return nil
}

func (x *Message) GetMapStrBytes() map[string][]byte {
	if x != nil {
		return x.MapStrBytes
	}
	return nil
}

func (x *Message) GetMapStrFloat() map[string]float32 {
	if x != nil {
		return x.MapStrFloat
	}
	return nil
}

func (x *Message) GetMapStrDouble() map[string]float64 {
	if x != nil {
		return x.MapStrDouble
	}
	return nil
}

func (x *Message) GetMapStrEnum() map[string]Enum {
	if x != nil {
		return x.MapStrEnum
	}
	return nil
}

func (x *Message) GetMapStrMsg() map[string]*Message {
	if x != nil {
		return x.MapStrMsg
	}
	return nil
}

func (x *Message) GetMapStrTimestamp() map[string]*timestamppb.Timestamp {
	if x != nil {
		return x.MapStrTimestamp
	}
	return nil
}

func (x *Message) GetMapStrDuration() map[string]*durationpb.Duration {
	if x != nil {
		return x.MapStrDuration
	}
	return nil
}

func (x *Message) GetI32Null() int32 {
	if x != nil {
		return x.I32Null
	}
	return 0
}

func (x *Message) GetI64Null() int64 {
	if x != nil {
		return x.I64Null
	}
	return 0
}

func (x *Message) GetU32Null() uint32 {
	if x != nil {
		return x.U32Null
	}
	return 0
}

func (x *Message) GetU64Null() uint64 {
	if x != nil {
		return x.U64Null
	}
	return 0
}

func (x *Message) GetS32Null() int32 {
	if x != nil {
		return x.S32Null
	}
	return 0
}

func (x *Message) GetS64Null() int64 {
	if x != nil {
		return x.S64Null
	}
	return 0
}

func (x *Message) GetF32Null() uint32 {
	if x != nil {
		return x.F32Null
	}
	return 0
}

func (x *Message) GetF64Null() uint64 {
	if x != nil {
		return x.F64Null
	}
	return 0
}

func (x *Message) GetSf32Null() int32 {
	if x != nil {
		return x.Sf32Null
	}
	return 0
}

func (x *Message) GetSf64Null() int64 {
	if x != nil {
		return x.Sf64Null
	}
	return 0
}

func (x *Message) GetBoolNull() bool {
	if x != nil {
		return x.BoolNull
	}
	return false
}

func (x *Message) GetStrNull() string {
	if x != nil {
		return x.StrNull
	}
	return ""
}

func (x *Message) GetBytesNull() []byte {
	if x != nil {
		return x.BytesNull
	}
	return nil
}

func (x *Message) GetFloatNull() float32 {
	if x != nil {
		return x.FloatNull
	}
	return 0
}

func (x *Message) GetDoubleNull() float64 {
	if x != nil {
		return x.DoubleNull
	}
	return 0
}

func (x *Message) GetTimestampNull() *timestamppb.Timestamp {
	if x != nil {
		return x.TimestampNull
	}
	return nil
}

func (x *Message) GetDurationNull() *durationpb.Duration {
	if x != nil {
		return x.DurationNull
	}
	return nil
}

func (x *Message) GetStructNull() *structpb.Struct {
	if x != nil {
		return x.StructNull
	}
	return nil
}

func (x *Message) GetEnumNull() Enum {
	if x != nil {
		return x.EnumNull
	}
	return Enum_UNKNOWN
}

func (x *Message) GetMsgNull() *Message {
	if x != nil {
		return x.MsgNull
	}
	return nil
}

var File_internal_testpb_message_proto protoreflect.FileDescriptor

var file_internal_testpb_message_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x70,
	0x62, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x06, 0x74, 0x65, 0x73, 0x74, 0x70, 0x62, 0x1a, 0x1c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xfc, 0x24, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x74, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x73, 0x74, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x33, 0x32, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x69, 0x33, 0x32, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x36, 0x34, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x69, 0x36, 0x34, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x33,
	0x32, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x75, 0x33, 0x32, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x36, 0x34, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x75, 0x36, 0x34, 0x12, 0x10,
	0x0a, 0x03, 0x73, 0x33, 0x32, 0x18, 0x07, 0x20, 0x01, 0x28, 0x11, 0x52, 0x03, 0x73, 0x33, 0x32,
	0x12, 0x10, 0x0a, 0x03, 0x73, 0x36, 0x34, 0x18, 0x08, 0x20, 0x01, 0x28, 0x12, 0x52, 0x03, 0x73,
	0x36, 0x34, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x33, 0x32, 0x18, 0x09, 0x20, 0x01, 0x28, 0x07, 0x52,
	0x03, 0x66, 0x33, 0x32, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x36, 0x34, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x06, 0x52, 0x03, 0x66, 0x36, 0x34, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x66, 0x33, 0x32, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0f, 0x52, 0x04, 0x73, 0x66, 0x33, 0x32, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x66,
	0x36, 0x34, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x10, 0x52, 0x04, 0x73, 0x66, 0x36, 0x34, 0x12, 0x12,
	0x0a, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x62, 0x6f,
	0x6f, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x6f, 0x61,
	0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06,
	0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x70, 0x5f, 0x73, 0x74, 0x72,
	0x18, 0x11, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x72, 0x70, 0x53, 0x74, 0x72, 0x12, 0x15, 0x0a,
	0x06, 0x72, 0x70, 0x5f, 0x69, 0x33, 0x32, 0x18, 0x12, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x72,
	0x70, 0x49, 0x33, 0x32, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x70, 0x5f, 0x69, 0x36, 0x34, 0x18, 0x13,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x05, 0x72, 0x70, 0x49, 0x36, 0x34, 0x12, 0x15, 0x0a, 0x06, 0x72,
	0x70, 0x5f, 0x75, 0x33, 0x32, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x05, 0x72, 0x70, 0x55,
	0x33, 0x32, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x70, 0x5f, 0x75, 0x36, 0x34, 0x18, 0x15, 0x20, 0x03,
	0x28, 0x04, 0x52, 0x05, 0x72, 0x70, 0x55, 0x36, 0x34, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x70, 0x5f,
	0x73, 0x33, 0x32, 0x18, 0x16, 0x20, 0x03, 0x28, 0x11, 0x52, 0x05, 0x72, 0x70, 0x53, 0x33, 0x32,
	0x12, 0x15, 0x0a, 0x06, 0x72, 0x70, 0x5f, 0x73, 0x36, 0x34, 0x18, 0x17, 0x20, 0x03, 0x28, 0x12,
	0x52, 0x05, 0x72, 0x70, 0x53, 0x36, 0x34, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x70, 0x5f, 0x66, 0x33,
	0x32, 0x18, 0x18, 0x20, 0x03, 0x28, 0x07, 0x52, 0x05, 0x72, 0x70, 0x46, 0x33, 0x32, 0x12, 0x15,
	0x0a, 0x06, 0x72, 0x70, 0x5f, 0x66, 0x36, 0x34, 0x18, 0x19, 0x20, 0x03, 0x28, 0x06, 0x52, 0x05,
	0x72, 0x70, 0x46, 0x36, 0x34, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x70, 0x5f, 0x73, 0x66, 0x33, 0x32,
	0x18, 0x1a, 0x20, 0x03, 0x28, 0x0f, 0x52, 0x06, 0x72, 0x70, 0x53, 0x66, 0x33, 0x32, 0x12, 0x17,
	0x0a, 0x07, 0x72, 0x70, 0x5f, 0x73, 0x66, 0x36, 0x34, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x10, 0x52,
	0x06, 0x72, 0x70, 0x53, 0x66, 0x36, 0x34, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x70, 0x5f, 0x62, 0x6f,
	0x6f, 0x6c, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x08, 0x52, 0x06, 0x72, 0x70, 0x42, 0x6f, 0x6f, 0x6c,
	0x12, 0x19, 0x0a, 0x08, 0x72, 0x70, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x1d, 0x20, 0x03,
	0x28, 0x0c, 0x52, 0x07, 0x72, 0x70, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x72,
	0x70, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x02, 0x52, 0x07, 0x72,
	0x70, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x70, 0x5f, 0x64, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x01, 0x52, 0x08, 0x72, 0x70, 0x44, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x35, 0x0a,
	0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x18, 0x22,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x06, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x3d, 0x0a, 0x0c, 0x72, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x23, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x72, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x3a, 0x0a, 0x0b, 0x72, 0x70, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x24, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x72, 0x70, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x34, 0x0a, 0x09, 0x72, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x18, 0x25, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x08, 0x72, 0x70,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x20, 0x0a, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0x26,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x45, 0x6e,
	0x75, 0x6d, 0x52, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x12, 0x25, 0x0a, 0x07, 0x72, 0x70, 0x5f, 0x65,
	0x6e, 0x75, 0x6d, 0x18, 0x27, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x70, 0x62, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x06, 0x72, 0x70, 0x45, 0x6e, 0x75, 0x6d, 0x12,
	0x21, 0x0a, 0x03, 0x73, 0x75, 0x62, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x03, 0x73,
	0x75, 0x62, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x70, 0x5f, 0x73, 0x75, 0x62, 0x18, 0x29, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x05, 0x72, 0x70, 0x53, 0x75, 0x62, 0x12, 0x27, 0x0a, 0x09, 0x6e, 0x6f,
	0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xa8,
	0xec, 0xd7, 0x4d, 0x01, 0xa8, 0xec, 0xd7, 0x4d, 0x02, 0x52, 0x08, 0x6e, 0x6f, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x0d, 0x6e, 0x6f, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x5f, 0x6d, 0x73, 0x67, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x0a, 0xa8, 0xec, 0xd7,
	0x4d, 0x01, 0xa8, 0xec, 0xd7, 0x4d, 0x02, 0x52, 0x0b, 0x6e, 0x6f, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x4d, 0x73, 0x67, 0x12, 0x2c, 0x0a, 0x0e, 0x69, 0x33, 0x32, 0x5f, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x78, 0x69, 0x74, 0x79, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x05, 0x42, 0x05, 0xb0, 0xec,
	0xd7, 0x4d, 0x2c, 0x52, 0x0d, 0x69, 0x33, 0x32, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69,
	0x74, 0x79, 0x12, 0x3e, 0x0a, 0x0b, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x5f, 0x73, 0x74,
	0x72, 0x18, 0x2d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x62,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x53,
	0x74, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x6d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x53,
	0x74, 0x72, 0x12, 0x3e, 0x0a, 0x0b, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x5f, 0x69, 0x33,
	0x32, 0x18, 0x2e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x62,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x49,
	0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x6d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x49,
	0x33, 0x32, 0x12, 0x3e, 0x0a, 0x0b, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x5f, 0x69, 0x36,
	0x34, 0x18, 0x2f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x62,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x49,
	0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x6d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x49,
	0x36, 0x34, 0x12, 0x3e, 0x0a, 0x0b, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x5f, 0x75, 0x33,
	0x32, 0x18, 0x30, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x62,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x55,
	0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x6d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x55,
	0x33, 0x32, 0x12, 0x3e, 0x0a, 0x0b, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x5f, 0x75, 0x36,
	0x34, 0x18, 0x31, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x62,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x55,
	0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x6d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x55,
	0x36, 0x34, 0x12, 0x3e, 0x0a, 0x0b, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x5f, 0x73, 0x33,
	0x32, 0x18, 0x32, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x62,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x53,
	0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x6d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x53,
	0x33, 0x32, 0x12, 0x3e, 0x0a, 0x0b, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x5f, 0x73, 0x36,
	0x34, 0x18, 0x33, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x62,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x53,
	0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x6d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x53,
	0x36, 0x34, 0x12, 0x3e, 0x0a, 0x0b, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x5f, 0x66, 0x33,
	0x32, 0x18, 0x34, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x62,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x46,
	0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x6d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x46,
	0x33, 0x32, 0x12, 0x3e, 0x0a, 0x0b, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x5f, 0x66, 0x36,
	0x34, 0x18, 0x35, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x62,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x46,
	0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x6d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x46,
	0x36, 0x34, 0x12, 0x41, 0x0a, 0x0c, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x5f, 0x73, 0x66,
	0x33, 0x32, 0x18, 0x36, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70,
	0x62, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72,
	0x53, 0x66, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x6d, 0x61, 0x70, 0x53, 0x74,
	0x72, 0x53, 0x66, 0x33, 0x32, 0x12, 0x41, 0x0a, 0x0c, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x72,
	0x5f, 0x73, 0x66, 0x36, 0x34, 0x18, 0x37, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x61, 0x70,
	0x53, 0x74, 0x72, 0x53, 0x66, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x6d, 0x61,
	0x70, 0x53, 0x74, 0x72, 0x53, 0x66, 0x36, 0x34, 0x12, 0x41, 0x0a, 0x0c, 0x6d, 0x61, 0x70, 0x5f,
	0x73, 0x74, 0x72, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x38, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x42, 0x6f, 0x6f, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0a, 0x6d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x44, 0x0a, 0x0d, 0x6d,
	0x61, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x39, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x42, 0x79, 0x74, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x6d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x12, 0x44, 0x0a, 0x0d, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x5f, 0x66, 0x6c, 0x6f,
	0x61, 0x74, 0x18, 0x3a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70,
	0x62, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72,
	0x46, 0x6c, 0x6f, 0x61, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x6d, 0x61, 0x70, 0x53,
	0x74, 0x72, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x47, 0x0a, 0x0e, 0x6d, 0x61, 0x70, 0x5f, 0x73,
	0x74, 0x72, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x3b, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0c, 0x6d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x12, 0x41, 0x0a, 0x0c, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x5f, 0x65, 0x6e, 0x75, 0x6d,
	0x18, 0x3c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x62, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x45, 0x6e,
	0x75, 0x6d, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x6d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x45,
	0x6e, 0x75, 0x6d, 0x12, 0x3e, 0x0a, 0x0b, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x5f, 0x6d,
	0x73, 0x67, 0x18, 0x3d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70,
	0x62, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72,
	0x4d, 0x73, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x6d, 0x61, 0x70, 0x53, 0x74, 0x72,
	0x4d, 0x73, 0x67, 0x12, 0x50, 0x0a, 0x11, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x3e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x6d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x4d, 0x0a, 0x10, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x72,
	0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x3f, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x6d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x08, 0x69, 0x33, 0x32, 0x5f, 0x6e, 0x75, 0x6c, 0x6c,
	0x18, 0x40, 0x20, 0x01, 0x28, 0x05, 0x42, 0x05, 0xa8, 0xec, 0xd7, 0x4d, 0x03, 0x52, 0x07, 0x69,
	0x33, 0x32, 0x4e, 0x75, 0x6c, 0x6c, 0x12, 0x20, 0x0a, 0x08, 0x69, 0x36, 0x34, 0x5f, 0x6e, 0x75,
	0x6c, 0x6c, 0x18, 0x41, 0x20, 0x01, 0x28, 0x03, 0x42, 0x05, 0xa8, 0xec, 0xd7, 0x4d, 0x03, 0x52,
	0x07, 0x69, 0x36, 0x34, 0x4e, 0x75, 0x6c, 0x6c, 0x12, 0x20, 0x0a, 0x08, 0x75, 0x33, 0x32, 0x5f,
	0x6e, 0x75, 0x6c, 0x6c, 0x18, 0x42, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x05, 0xa8, 0xec, 0xd7, 0x4d,
	0x03, 0x52, 0x07, 0x75, 0x33, 0x32, 0x4e, 0x75, 0x6c, 0x6c, 0x12, 0x20, 0x0a, 0x08, 0x75, 0x36,
	0x34, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x18, 0x43, 0x20, 0x01, 0x28, 0x04, 0x42, 0x05, 0xa8, 0xec,
	0xd7, 0x4d, 0x03, 0x52, 0x07, 0x75, 0x36, 0x34, 0x4e, 0x75, 0x6c, 0x6c, 0x12, 0x20, 0x0a, 0x08,
	0x73, 0x33, 0x32, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x18, 0x44, 0x20, 0x01, 0x28, 0x11, 0x42, 0x05,
	0xa8, 0xec, 0xd7, 0x4d, 0x03, 0x52, 0x07, 0x73, 0x33, 0x32, 0x4e, 0x75, 0x6c, 0x6c, 0x12, 0x20,
	0x0a, 0x08, 0x73, 0x36, 0x34, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x18, 0x45, 0x20, 0x01, 0x28, 0x12,
	0x42, 0x05, 0xa8, 0xec, 0xd7, 0x4d, 0x03, 0x52, 0x07, 0x73, 0x36, 0x34, 0x4e, 0x75, 0x6c, 0x6c,
	0x12, 0x20, 0x0a, 0x08, 0x66, 0x33, 0x32, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x18, 0x46, 0x20, 0x01,
	0x28, 0x07, 0x42, 0x05, 0xa8, 0xec, 0xd7, 0x4d, 0x03, 0x52, 0x07, 0x66, 0x33, 0x32, 0x4e, 0x75,
	0x6c, 0x6c, 0x12, 0x20, 0x0a, 0x08, 0x66, 0x36, 0x34, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x18, 0x47,
	0x20, 0x01, 0x28, 0x06, 0x42, 0x05, 0xa8, 0xec, 0xd7, 0x4d, 0x03, 0x52, 0x07, 0x66, 0x36, 0x34,
	0x4e, 0x75, 0x6c, 0x6c, 0x12, 0x22, 0x0a, 0x09, 0x73, 0x66, 0x33, 0x32, 0x5f, 0x6e, 0x75, 0x6c,
	0x6c, 0x18, 0x48, 0x20, 0x01, 0x28, 0x0f, 0x42, 0x05, 0xa8, 0xec, 0xd7, 0x4d, 0x03, 0x52, 0x08,
	0x73, 0x66, 0x33, 0x32, 0x4e, 0x75, 0x6c, 0x6c, 0x12, 0x22, 0x0a, 0x09, 0x73, 0x66, 0x36, 0x34,
	0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x18, 0x49, 0x20, 0x01, 0x28, 0x10, 0x42, 0x05, 0xa8, 0xec, 0xd7,
	0x4d, 0x03, 0x52, 0x08, 0x73, 0x66, 0x36, 0x34, 0x4e, 0x75, 0x6c, 0x6c, 0x12, 0x22, 0x0a, 0x09,
	0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x05, 0xa8, 0xec, 0xd7, 0x4d, 0x03, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6c, 0x4e, 0x75, 0x6c, 0x6c,
	0x12, 0x20, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x18, 0x4b, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x05, 0xa8, 0xec, 0xd7, 0x4d, 0x03, 0x52, 0x07, 0x73, 0x74, 0x72, 0x4e, 0x75,
	0x6c, 0x6c, 0x12, 0x24, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x6e, 0x75, 0x6c, 0x6c,
	0x18, 0x4c, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x05, 0xa8, 0xec, 0xd7, 0x4d, 0x03, 0x52, 0x09, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x4e, 0x75, 0x6c, 0x6c, 0x12, 0x24, 0x0a, 0x0a, 0x66, 0x6c, 0x6f, 0x61,
	0x74, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x02, 0x42, 0x05, 0xa8, 0xec,
	0xd7, 0x4d, 0x03, 0x52, 0x09, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x12, 0x26,
	0x0a, 0x0b, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x18, 0x4e, 0x20,
	0x01, 0x28, 0x01, 0x42, 0x05, 0xa8, 0xec, 0xd7, 0x4d, 0x03, 0x52, 0x0a, 0x64, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x4e, 0x75, 0x6c, 0x6c, 0x12, 0x48, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x18, 0x4f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x05, 0xa8, 0xec, 0xd7, 0x4d,
	0x03, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4e, 0x75, 0x6c, 0x6c,
	0x12, 0x45, 0x0a, 0x0d, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6c,
	0x6c, 0x18, 0x50, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x05, 0xa8, 0xec, 0xd7, 0x4d, 0x03, 0x52, 0x0c, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6c, 0x6c, 0x12, 0x3f, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x18, 0x51, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x05, 0xa8, 0xec, 0xd7, 0x4d, 0x03, 0x52, 0x0a, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x12, 0x30, 0x0a, 0x09, 0x65, 0x6e, 0x75, 0x6d,
	0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x18, 0x52, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x70, 0x62, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x42, 0x05, 0xa8, 0xec, 0xd7, 0x4d, 0x03,
	0x52, 0x08, 0x65, 0x6e, 0x75, 0x6d, 0x4e, 0x75, 0x6c, 0x6c, 0x12, 0x31, 0x0a, 0x08, 0x6d, 0x73,
	0x67, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x18, 0x53, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x05, 0xa8,
	0xec, 0xd7, 0x4d, 0x03, 0x52, 0x07, 0x6d, 0x73, 0x67, 0x4e, 0x75, 0x6c, 0x6c, 0x1a, 0x3c, 0x0a,
	0x0e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x53, 0x74, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3c, 0x0a, 0x0e, 0x4d,
	0x61, 0x70, 0x53, 0x74, 0x72, 0x49, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3c, 0x0a, 0x0e, 0x4d, 0x61, 0x70,
	0x53, 0x74, 0x72, 0x49, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3c, 0x0a, 0x0e, 0x4d, 0x61, 0x70, 0x53, 0x74,
	0x72, 0x55, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3c, 0x0a, 0x0e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x55,
	0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x3c, 0x0a, 0x0e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x53, 0x33, 0x32,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x11, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x3c, 0x0a, 0x0e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x53, 0x36, 0x34, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x12, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x3c, 0x0a, 0x0e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x46, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x07, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3c, 0x0a,
	0x0e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x46, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3d, 0x0a, 0x0f, 0x4d,
	0x61, 0x70, 0x53, 0x74, 0x72, 0x53, 0x66, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0f, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3d, 0x0a, 0x0f, 0x4d, 0x61,
	0x70, 0x53, 0x74, 0x72, 0x53, 0x66, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x10, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3d, 0x0a, 0x0f, 0x4d, 0x61, 0x70,
	0x53, 0x74, 0x72, 0x42, 0x6f, 0x6f, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x4d, 0x61, 0x70, 0x53,
	0x74, 0x72, 0x42, 0x79, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x4d, 0x61, 0x70, 0x53,
	0x74, 0x72, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3f, 0x0a, 0x11, 0x4d, 0x61, 0x70, 0x53,
	0x74, 0x72, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4b, 0x0a, 0x0f, 0x4d, 0x61, 0x70,
	0x53, 0x74, 0x72, 0x45, 0x6e, 0x75, 0x6d, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x22,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x70, 0x62, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4d, 0x0a, 0x0e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72,
	0x4d, 0x73, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x25, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x70, 0x62, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5e, 0x0a, 0x14, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5c, 0x0a, 0x13, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2f,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x2a, 0x30, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0b, 0x0a, 0x07, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4f, 0x4e, 0x45, 0x10,
	0x01, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x57, 0x4f, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x48,
	0x52, 0x45, 0x45, 0x10, 0x03, 0x42, 0x86, 0x01, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x70, 0x62, 0x42, 0x0c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x50, 0x01, 0x5a, 0x32, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x79, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x79, 0x2d, 0x61, 0x69, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x70, 0x62, 0xa2, 0x02, 0x03, 0x54, 0x58, 0x58, 0xaa, 0x02,
	0x06, 0x54, 0x65, 0x73, 0x74, 0x70, 0x62, 0xca, 0x02, 0x06, 0x54, 0x65, 0x73, 0x74, 0x70, 0x62,
	0xe2, 0x02, 0x12, 0x54, 0x65, 0x73, 0x74, 0x70, 0x62, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x06, 0x54, 0x65, 0x73, 0x74, 0x70, 0x62, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_internal_testpb_message_proto_rawDescOnce sync.Once
	file_internal_testpb_message_proto_rawDescData = file_internal_testpb_message_proto_rawDesc
)

func file_internal_testpb_message_proto_rawDescGZIP() []byte {
	file_internal_testpb_message_proto_rawDescOnce.Do(func() {
		file_internal_testpb_message_proto_rawDescData = protoimpl.X.CompressGZIP(file_internal_testpb_message_proto_rawDescData)
	})
	return file_internal_testpb_message_proto_rawDescData
}

var file_internal_testpb_message_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_internal_testpb_message_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_internal_testpb_message_proto_goTypes = []interface{}{
	(Enum)(0),                     // 0: testpb.Enum
	(*Message)(nil),               // 1: testpb.Message
	nil,                           // 2: testpb.Message.MapStrStrEntry
	nil,                           // 3: testpb.Message.MapStrI32Entry
	nil,                           // 4: testpb.Message.MapStrI64Entry
	nil,                           // 5: testpb.Message.MapStrU32Entry
	nil,                           // 6: testpb.Message.MapStrU64Entry
	nil,                           // 7: testpb.Message.MapStrS32Entry
	nil,                           // 8: testpb.Message.MapStrS64Entry
	nil,                           // 9: testpb.Message.MapStrF32Entry
	nil,                           // 10: testpb.Message.MapStrF64Entry
	nil,                           // 11: testpb.Message.MapStrSf32Entry
	nil,                           // 12: testpb.Message.MapStrSf64Entry
	nil,                           // 13: testpb.Message.MapStrBoolEntry
	nil,                           // 14: testpb.Message.MapStrBytesEntry
	nil,                           // 15: testpb.Message.MapStrFloatEntry
	nil,                           // 16: testpb.Message.MapStrDoubleEntry
	nil,                           // 17: testpb.Message.MapStrEnumEntry
	nil,                           // 18: testpb.Message.MapStrMsgEntry
	nil,                           // 19: testpb.Message.MapStrTimestampEntry
	nil,                           // 20: testpb.Message.MapStrDurationEntry
	(*timestamppb.Timestamp)(nil), // 21: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),   // 22: google.protobuf.Duration
	(*structpb.Struct)(nil),       // 23: google.protobuf.Struct
}
var file_internal_testpb_message_proto_depIdxs = []int32{
	21, // 0: testpb.Message.timestamp:type_name -> google.protobuf.Timestamp
	22, // 1: testpb.Message.duration:type_name -> google.protobuf.Duration
	23, // 2: testpb.Message.struct:type_name -> google.protobuf.Struct
	21, // 3: testpb.Message.rp_timestamp:type_name -> google.protobuf.Timestamp
	22, // 4: testpb.Message.rp_duration:type_name -> google.protobuf.Duration
	23, // 5: testpb.Message.rp_struct:type_name -> google.protobuf.Struct
	0,  // 6: testpb.Message.enum:type_name -> testpb.Enum
	0,  // 7: testpb.Message.rp_enum:type_name -> testpb.Enum
	1,  // 8: testpb.Message.sub:type_name -> testpb.Message
	1,  // 9: testpb.Message.rp_sub:type_name -> testpb.Message
	1,  // 10: testpb.Message.no_filter_msg:type_name -> testpb.Message
	2,  // 11: testpb.Message.map_str_str:type_name -> testpb.Message.MapStrStrEntry
	3,  // 12: testpb.Message.map_str_i32:type_name -> testpb.Message.MapStrI32Entry
	4,  // 13: testpb.Message.map_str_i64:type_name -> testpb.Message.MapStrI64Entry
	5,  // 14: testpb.Message.map_str_u32:type_name -> testpb.Message.MapStrU32Entry
	6,  // 15: testpb.Message.map_str_u64:type_name -> testpb.Message.MapStrU64Entry
	7,  // 16: testpb.Message.map_str_s32:type_name -> testpb.Message.MapStrS32Entry
	8,  // 17: testpb.Message.map_str_s64:type_name -> testpb.Message.MapStrS64Entry
	9,  // 18: testpb.Message.map_str_f32:type_name -> testpb.Message.MapStrF32Entry
	10, // 19: testpb.Message.map_str_f64:type_name -> testpb.Message.MapStrF64Entry
	11, // 20: testpb.Message.map_str_sf32:type_name -> testpb.Message.MapStrSf32Entry
	12, // 21: testpb.Message.map_str_sf64:type_name -> testpb.Message.MapStrSf64Entry
	13, // 22: testpb.Message.map_str_bool:type_name -> testpb.Message.MapStrBoolEntry
	14, // 23: testpb.Message.map_str_bytes:type_name -> testpb.Message.MapStrBytesEntry
	15, // 24: testpb.Message.map_str_float:type_name -> testpb.Message.MapStrFloatEntry
	16, // 25: testpb.Message.map_str_double:type_name -> testpb.Message.MapStrDoubleEntry
	17, // 26: testpb.Message.map_str_enum:type_name -> testpb.Message.MapStrEnumEntry
	18, // 27: testpb.Message.map_str_msg:type_name -> testpb.Message.MapStrMsgEntry
	19, // 28: testpb.Message.map_str_timestamp:type_name -> testpb.Message.MapStrTimestampEntry
	20, // 29: testpb.Message.map_str_duration:type_name -> testpb.Message.MapStrDurationEntry
	21, // 30: testpb.Message.timestamp_null:type_name -> google.protobuf.Timestamp
	22, // 31: testpb.Message.duration_null:type_name -> google.protobuf.Duration
	23, // 32: testpb.Message.struct_null:type_name -> google.protobuf.Struct
	0,  // 33: testpb.Message.enum_null:type_name -> testpb.Enum
	1,  // 34: testpb.Message.msg_null:type_name -> testpb.Message
	0,  // 35: testpb.Message.MapStrEnumEntry.value:type_name -> testpb.Enum
	1,  // 36: testpb.Message.MapStrMsgEntry.value:type_name -> testpb.Message
	21, // 37: testpb.Message.MapStrTimestampEntry.value:type_name -> google.protobuf.Timestamp
	22, // 38: testpb.Message.MapStrDurationEntry.value:type_name -> google.protobuf.Duration
	39, // [39:39] is the sub-list for method output_type
	39, // [39:39] is the sub-list for method input_type
	39, // [39:39] is the sub-list for extension type_name
	39, // [39:39] is the sub-list for extension extendee
	0,  // [0:39] is the sub-list for field type_name
}

func init() { file_internal_testpb_message_proto_init() }
func file_internal_testpb_message_proto_init() {
	if File_internal_testpb_message_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_internal_testpb_message_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_internal_testpb_message_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_internal_testpb_message_proto_goTypes,
		DependencyIndexes: file_internal_testpb_message_proto_depIdxs,
		EnumInfos:         file_internal_testpb_message_proto_enumTypes,
		MessageInfos:      file_internal_testpb_message_proto_msgTypes,
	}.Build()
	File_internal_testpb_message_proto = out.File
	file_internal_testpb_message_proto_rawDesc = nil
	file_internal_testpb_message_proto_goTypes = nil
	file_internal_testpb_message_proto_depIdxs = nil
}
